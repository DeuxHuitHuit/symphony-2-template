// generator
#generate-strict-guttered-grid (@cols) when (@cols > 0) {

	// recursive definitions
	#generate-ctn (@n) {
		.ctn-@{n} {
			// cols
			#generate-cols-in(@n);
			#generate-cols-ex(@nb-cols, @n);
			#generate-spacing(spacing-small, @n);
			#generate-spacing(spacing-mid, @n);
			#generate-spacing(spacing-large, @n);
			#generate-spaced-cols(spacing-small, @n);
			#generate-spaced-cols(spacing-mid, @n);
			#generate-spaced-cols(spacing-large, @n);
		}
		
		#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i < @n) {
			// col definition
			> .col-@{i} {
				width: percentage(@i / @n);
			}
			> .col-offset-@{i} {
				margin-left: percentage(@i / @n);
			}
			// recursion
			#generate-cols-in(@n, (@i + 1));
		}
		
		#generate-spaced-cols(@grid-spacing, @n) {
			@spacing-suffix: replace(@grid-spacing, "spacing-", "");
			&.guttered-@{spacing-suffix} {
				> .col-1	{
					@base-width: percentage(1 / @n);
					@spacing-ratio: (@n - 1) / @n;
					@spacing-value: @@grid-spacing;
					width: calc(~'@{base-width} - @{spacing-value} * @{spacing-ratio}');
				}
			}
		}
		
		#generate-spacing(@grid-spacing, @n) {
			@spacing-suffix: replace(@grid-spacing, "spacing-", "");
			@spacing-value: @@grid-spacing;
			@second-row: @n + 1;
			&.guttered-@{spacing-suffix} {
				> .col-1	{
					margin-left: 0;
					margin-right: 0;
					&:nth-child(n) {
						margin-top: 0;
					}
					&:nth-child(n + 1) {
						margin-left: @spacing-value;
					}
				}
				> .col-1:nth-child(@{n}n + 1) {
					margin-left: 0;
				}
				> .col-1:nth-child(n + @{second-row}) {
					margin-top: @spacing-value;
				}
			}
		}

		#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n) {
			// col definition
			> .col-@{i} {
				width: 100%;
			}
			// recursion
			#generate-cols-ex(@n, (@i + 1));
		}
	}


	// recursive definitions
	#generate-resp-ctn(@prefix, @n) {
		.ctn-@{prefix}-@{n} {
			// cols
			#generate-cols-in(@n);
			#generate-spacing(spacing-small, @n);
			#generate-spacing(spacing-mid, @n);
			#generate-spacing(spacing-large, @n);
			#generate-spaced-cols(spacing-small, @n);
			#generate-spaced-cols(spacing-mid, @n);
			#generate-spaced-cols(spacing-large, @n);
			#generate-resp-spacing(@prefix, spacing-small, @n);
			#generate-resp-spacing(@prefix, spacing-mid, @n);
			#generate-resp-spacing(@prefix, spacing-large, @n);
			#generate-resp-spaced-cols(@prefix, spacing-small, @n);
			#generate-resp-spaced-cols(@prefix, spacing-mid, @n);
			#generate-resp-spaced-cols(@prefix, spacing-large, @n);
			// cols, resp
			#generate-resp-cols-in(@prefix, @n);
			#generate-resp-cols-ex(@prefix, @nb-cols, @n);

		}
		
		// standard
		#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i < @n)  {
			// col definition
			> .col-@{i} {
				width: percentage(@i / @n);
			}
			// recursion
			#generate-cols-in(@n, (@i + 1));
		}
		#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n)  {
			// col definition
			> .col-@{i} {
				width: 100%;
			}
			// recursion
			#generate-cols-ex(@n, (@i + 1));
		}

		#generate-spaced-cols(@grid-spacing, @n) {
			@spacing-suffix: replace(@grid-spacing, "spacing-", "");
			&.guttered-@{spacing-suffix} {
				> .col-1	{
					@base-width: percentage(1 / @n);
					@spacing-ratio: (@n - 1) / @n;
					@spacing-value: @@grid-spacing;
					width: calc(~'@{base-width} - @{spacing-value} * @{spacing-ratio}');
				}
			}
		}
		
		#generate-spacing(@grid-spacing, @n) {
			@spacing-suffix: replace(@grid-spacing, "spacing-", "");
			@spacing-value: @@grid-spacing;
			@second-row: @n + 1;
			&.guttered-@{spacing-suffix} {
				> .col-1	{
					margin-left: 0;
					margin-right: 0;
					&:nth-child(n) {
						margin-top: 0;
					}
					&:nth-child(n + 1) {
						margin-left: @spacing-value;
					}
				}
				> .col-1:nth-child(@{n}n + 1) {
					margin-left: 0;
				}
				> .col-1:nth-child(n + @{second-row}) {
					margin-top: @spacing-value;
				}
			}
		}

		#generate-resp-spaced-cols(@prefix, @grid-spacing, @n) {
			@spacing-suffix: replace(@grid-spacing, "spacing-", "");
			&.guttered-@{spacing-suffix} {
				> [class*="col-@{prefix}-1"]	{
					@base-width: percentage(1 / @n);
					@spacing-ratio: (@n - 1) / @n;
					@spacing-value: @@grid-spacing;
					width: calc(~'@{base-width} - @{spacing-value} * @{spacing-ratio}');
				}
			}
		}
		
		#generate-resp-spacing(@prefix, @grid-spacing, @n) {
			@spacing-suffix: replace(@grid-spacing, "spacing-", "");
			@spacing-value: @@grid-spacing;
			@second-row: @n + 1;
			&.guttered-@{spacing-suffix} {
				> [class*="col-@{prefix}-1"]	{
					margin-left: 0;
					margin-right: 0;
					&:nth-child(n) {
						margin-top: 0;
					}
					+ [class*="col-@{prefix}-1"] {
						margin-left: @spacing-value;
					}
				}
				> [class*="col-@{prefix}-1"]:nth-child(@{n}n + 1) {
					margin-left: 0;
				}
				> .col-1:nth-child(n + @{second-row}) {
					margin-top: @spacing-value;
				}
			}
		}
		
		// included col
		#generate-resp-cols-in(@prefix, @n, @i: 0) when (@i >= 0) and (@i < @n) {
			// col definition
			> .col-@{prefix}-@{i} when (@i > 0) {
				width: percentage(@i / @n);
			}
			> .col-offset-@{prefix}-@{i} {
				margin-left: percentage(@i / @n);
			}
			
			// recursion
			#generate-resp-cols-in(@prefix, @n, (@i + 1));
		}
		// excluded cols
		#generate-resp-cols-ex(@prefix, @n, @i: 1) when (@i > 0) and (@i <= @n) {
			// col definition
			> .col-@{prefix}-@{i} {
				width: 100%;
			}
			
			// recursion
			#generate-resp-cols-ex(@prefix, @n, (@i + 1));
		}
	}

	// not responsive
	#generate-ctn(@cols);
	
	// fully responsive
	#mq-min-width(@screen-ph, { #generate-resp-ctn(ph, @cols); });
	#mq-min-width(@screen-xs, { #generate-resp-ctn(xs, @cols); });
	#mq-min-width(@screen-sm, { #generate-resp-ctn(sm, @cols); });
	#mq-min-width(@screen-md, { #generate-resp-ctn(md, @cols); });
	#mq-min-width(@screen-lg, { #generate-resp-ctn(lg, @cols); });
	#mq-min-width(@screen-xl, { #generate-resp-ctn(xl, @cols); });
}