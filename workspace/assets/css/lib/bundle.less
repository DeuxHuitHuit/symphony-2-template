/**
 * Anim classes
 */
 
.noanim {
	&, & * {
		#transition(none) !important;
	}
}

//=========================
// = MULTILE COLUMNS VENDOR PREFIXES MIXINS
//=========================

#content-columns(@column-count: 1, @column-gap: 20px) {
	#column-count(@column-count);
	#column-gap(@column-gap);
}

#column-count (@column-count) {
	-webkit-column-count: @column-count;
	   -moz-column-count: @column-count;
	        column-count: @column-count;
}

#column-gap (@column-gap) {
	-webkit-column-gap: @column-gap;
	   -moz-column-gap: @column-gap;
	        column-gap: @column-gap;
}

#column-span (@column-span) {
	-webkit-column-span: @column-span;
	-moz-column-span: @column-span;
	column-span: @column-span;
}

//=========================
// = VENDOR PREFIXES
//=========================

/* BORDER RADIUS */
#border-radius (@br) {
	-webkit-border-radius: @br;
	   -moz-border-radius: @br;
			border-radius: @br;
}

/* TRANSITION */
#transition (...) {
	-webkit-transition: @arguments;
	   -moz-transition: @arguments;
		-ms-transition: @arguments;
		 -o-transition: @arguments;
			transition: @arguments;
}

#transition-delay (@delay) {
	-webkit-transition-delay: @delay;
	   -moz-transition-delay: @delay;
		-ms-transition-delay: @delay;
		 -o-transition-delay: @delay;
			transition-delay: @delay;
}

#transition-duration (@duration) {
	-webkit-transition-duration: @duration;
	   -moz-transition-duration: @duration;
		-ms-transition-duration: @duration;
		 -o-transition-duration: @duration;
			transition-duration: @duration;
}

#cb-transition (...) {
	-webkit-transition: ~"-webkit-@{arguments}";
	   -moz-transition: ~"-moz-@{arguments}";
		-ms-transition: ~"-ms-@{arguments}";
		 -o-transition: ~"-o-@{arguments}";
			transition: @arguments;
}

/* TRANSFORM */
#transform (...) {
	-webkit-transform: @arguments;
	   -moz-transform: @arguments;
		-ms-transform: @arguments;
		 -o-transform: @arguments;
			transform: @arguments;
}

#transform-origin (@origin) {
	-webkit-transform-origin: @origin;
	   -moz-transform-origin: @origin;
		-ms-transform-origin: @origin;
		 -o-transform-origin: @origin;
			transform-origin: @origin;
}

/* TRANSLATE */
#translate2d (@x, @y) {
	-webkit-transform:translate(@x, @y);
	   -moz-transform:translate(@x, @y);
		-ms-transform:translate(@x, @y);
		 -o-transform:translate(@x, @y);
			transform:translate(@x, @y);
}

#translate (@x, @y, @z:0px) {
	#translate2d(@x, @y);

	-webkit-transform:translate3d(@x, @y, @z);
	   -moz-transform:translate3d(@x, @y, @z);
		-ms-transform:translate3d(@x, @y, @z);
		 -o-transform:translate3d(@x, @y, @z);
			transform:translate3d(@x, @y, @z);
}

/* SCALE */
#scale3d (@scaleX, @scaleY: @scaleX, @scaleZ: 1) {
	#scale2d(@scaleX, @scaleY);
	
	-webkit-transform:scale3d(@scaleX, @scaleY, @scaleZ);
	   -moz-transform:scale3d(@scaleX, @scaleY, @scaleZ);
		-ms-transform:scale3d(@scaleX, @scaleY, @scaleZ);
		 -o-transform:scale3d(@scaleX, @scaleY, @scaleZ);
			transform:scale3d(@scaleX, @scaleY, @scaleZ);
}

#scale2d (@scaleX, @scaleY: @scaleX) {
	-webkit-transform:scale(@scaleX,@scaleY);
	   -moz-transform:scale(@scaleX,@scaleY);
		-ms-transform:scale(@scaleX,@scaleY);
		 -o-transform:scale(@scaleX,@scaleY);
			transform:scale(@scaleX,@scaleY);
}

#scale (@scale) {
	#scale2d(@scale, @scale);
}

/* ROTATE */
#rotateZ (@a) {
	-webkit-transform: rotateZ(@a);
	   -moz-transform: rotateZ(@a);
		-ms-transform: rotateZ(@a);
		 -o-transform: rotateZ(@a);
			transform: rotateZ(@a);
}

/* SKEW */
#skew (@skew) {
	-webkit-transform: skew(@skew);
	   -moz-transform: skew(@skew);
		-ms-transform:scale(@skew); // ms does not support skew
		 -o-transform: skew(@skew);
			transform: skew(@skew);
}

/* FLIP */
#flipX () {
	-webkit-transform: scaleX(-1);
	   -moz-transform: scaleX(-1);
	     -o-transform: scaleX(-1);
			transform: scaleX(-1);
	filter: FlipH;
	-ms-filter: "FlipH";
}

#flipY {
	-webkit-transform: scaleY(-1);
	   -moz-transform: scaleY(-1);
	     -o-transform: scaleY(-1);
			transform: scaleY(-1);
	filter: FlipV;
	-ms-filter: "FlipV";
}

/* PERSPECTIVE */
#perspective (@perspective) {
	-webkit-perspective: @perspective;
	   -moz-perspective: @perspective;
		-ms-perspective: @perspective;
		 -o-perspective: @perspective;
			perspective: @perspective;
}

#perspective-origin (@origin) {
	-webkit-perspective-origin: @origin;
	   -moz-perspective-origin: @origin;
		-ms-perspective-origin: @origin;
		 -o-perspective-origin: @origin;
			perspective-origin: @origin;
}

/* PRESERVE 3D */
#preserve-3d () {
	-webkit-transform-style: preserve-3d;
	   -moz-transform-style: preserve-3d;
		-ms-transform-style: preserve-3d;
		 -o-transform-style: preserve-3d;
			transform-style: preserve-3d;
}

/* FILTER */
#filter (@filter) {
	-webkit-filter: @filter;
	   -moz-filter: @filter;
		-ms-filter: @filter;
		 -o-filter: @filter;
			filter: @filter;
}



/* BOX SIZING */
#box-sizing (@box-sizing: border-box) {
	-webkit-box-sizing: @box-sizing;
	   -moz-box-sizing: @box-sizing;
		-ms-box-sizing: @box-sizing;
		 -o-box-sizing: @box-sizing;
			box-sizing: @box-sizing;
}

/* BACKGROUND-SIZE */
#background-size (@bs: cover) {
	-webkit-background-size: @bs;
	   -moz-background-size: @bs;
		-ms-background-size: @bs;
		 -o-background-size: @bs;
			background-size: @bs;
}

/* USER-SELECT */
#user-select (@select: none) {
	-webkit-touch-callout: @select;
	-webkit-user-select: @select;
	 -khtml-user-select: @select;
	   -moz-user-select: @select;
		-ms-user-select: @select;
			user-select: @select;
}

/* BACKFACE-VISIBILITY */
#backface (@visibility: hidden) {
	-webkit-backface-visibility: @visibility;
	   -moz-backface-visibility: @visibility;
	    -ms-backface-visibility: @visibility;
		 -o-backface-visibility: @visibility;
			backface-visibility: @visibility;
}

/* GRAYSCALE */
#add-grayscale (){
	/* Firefox 4+ */
	filter: url(~"@{svg-path}grayscale.svg#grayscale");
	filter: gray; /* IE 6-9 */
	-webkit-filter: grayscale(100%);
}

#remove-grayscale (){
	-webkit-filter: grayscale(0%);

	/* Firefox 4+ */
	filter: none; /* IE 6-9 */
}

#hyphens(@val: auto) {
  word-wrap: break-word;
  -webkit-hyphens: @val;
     -moz-hyphens: @val;
      -ms-hyphens: @val; 
       -o-hyphens: @val;
          hyphens: @val;
}

//Documentation http://blog.teamtreehouse.com/the-css3-placeholder-pseudo-element
#placeholder (@color) when (iscolor(@color)) {
	&:-moz-placeholder            { color: @color; } // Firefox 4-18
	&::-moz-placeholder           { color: @color; } // Firefox 19+
	&:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
	&::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}

#placeholder (@rules) when (false = iscolor(@rules)) {
	&:-moz-placeholder            { @rules(); } // Firefox 4-18
	&::-moz-placeholder           { @rules(); } // Firefox 19+
	&:-ms-input-placeholder       { @rules(); } // Internet Explorer 10+
	&::-webkit-input-placeholder  { @rules(); } // Safari and Chrome
}

#animation (...) {
	-webkit-animation: @arguments;
	   -moz-animation: @arguments;
	    -ms-animation: @arguments;
		 -o-animation: @arguments;
			animation: @arguments;
}

#animation-key (@name, @rules) {
	@-webkit-keyframes @name {
		@rules();
	}
	
	@-moz-keyframes @name {
		@rules();
	}
	
	@-ms-keyframes @name {
		@rules();
	}
	
	@-o-keyframes @name {
		@rules();
	}

	/* Standard syntax */
	@keyframes @name {
		@rules();
	}
}

// GRADIENTS
// --------------------------------------------------

#gradient {

	// Horizontal gradient, from left to right
	//
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
	.horizontal (@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
		background-image: -webkit-gradient(linear, @start-percent top, @end-percent top, from(@start-color), to(@end-color)); // Safari 4+, Chrome 2+
		background-image: -webkit-linear-gradient(left, color-stop(@start-color @start-percent), color-stop(@end-color @end-percent)); // Safari 5.1+, Chrome 10+
		background-image: -moz-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // FF 3.6+
		background-image:  linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
	}

	// Vertical gradient, from top to bottom
	//
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
	.vertical (@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
		background-image: -webkit-gradient(linear, left @start-percent, left @end-percent, from(@start-color), to(@end-color)); // Safari 4+, Chrome 2+
		background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent); // Safari 5.1+, Chrome 10+
		background-image:  -moz-linear-gradient(top, @start-color @start-percent, @end-color @end-percent); // FF 3.6+
		background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
	}

	.directional (@start-color: #555; @end-color: #333; @deg: 45deg) {
		background-repeat: repeat-x;
		background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1+, Chrome 10+
		background-image: -moz-linear-gradient(@deg, @start-color, @end-color); // FF 3.6+
		background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10
	}

	.horizontal-three-colors (@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
		background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @mid-color), to(@end-color));
		background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
		background-image: -moz-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
		background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
	}

	.vertical-three-colors (@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
		background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @mid-color), to(@end-color));
		background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
		background-image: -moz-linear-gradient(top, @start-color, @mid-color @color-stop, @end-color);
		background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
	}

	.radial (@inner-color: #555; @outer-color: #333; @x-origin: center; @y-origin: center) {
		background-image: -webkit-gradient(radial, @x-origin @y-origin, 0, @x-origin @y-origin, 1011, from(@inner-color), to(@outer-color));
		background-image: -webkit-radial-gradient(@x-origin @y-origin, ellipse farthest-corner, @inner-color 0%, @outer-color 100%);
		background-image: -moz-radial-gradient(@x-origin @y-origin, ellipse farthest-corner, @inner-color 0%, @outer-color 100%);
		background-image: radial-gradient(ellipse farthest-corner at @x-origin @y-origin, @inner-color 0%, @outer-color 100%);
		background-repeat: no-repeat;
	}
 
	.striped (@color: rgba(255,255,255,.15); @angle: 45deg) {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, @color), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, @color), color-stop(.75, @color), color-stop(.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
		background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
	}
}

/*******************************
 * @author DeuxHuitHuit
 *****************************/

/* *************************** CURSOR FCT ****** */
#cursor-normal () {
	cursor: auto;
}

#cursor-drag () {
	cursor: move;
}

#cursor-hand () {
	cursor: pointer;
	cursor: hand;
}

#cursor-loading () {
	cursor: wait;
}

//=========================
// = CURSOR CLASSES
//=========================

.cursor-hand {
	#cursor-hand();
}

.cursor-drag {
	#cursor-drag();
}

.cursor-normal {
	cursor: auto;
}

.cursor-loading {
	cursor: wait;
}
/*******************************
 * @author DeuxHuitHuit
 *****************************/

//=========================
// = MIXINS
//=========================

#marpad (@width: 0) {
	padding: @width;
	margin: @width;
}

/* *************************** SIZE FCT ****** */
#wh (@width: 100%, @height: @width) {
	width: @width;
	height: @height;
}

#sq (@side) {
	#wh(@side, @side);
}

#fill (@top: 0, @right: @top, @bottom: @top, @left: @top) {
	top: @top;
	left: @left;
	right: @right;
	bottom: @bottom;
}

/* *************************** DISPLAY FCT ****** */
#block () {
	display: block;
}

#ib (@valign: top) {
	display: inline-block;
	vertical-align: @valign;
}

/* *************************** POSITION FCT ****** */

// ***** Absolute *****
#absolute () {
	position: absolute;
}

#absolute (@zindex) {
	position: absolute;
	z-index: @zindex;
}

// ***** Relative *****
#relative () {
	position: relative;
}

#relative (@zindex) {
	#relative();
	z-index: @zindex;
}

// ***** Fixed *****
#fixed () {
	position: fixed;
}

#fixed (@zindex: 10) {
	.fixed;
	z-index: @zindex;
}


/* *************************** CENTER FCT ****** */
#vh-center (@top-offset: 0px, @left-offset: @top-offset) {
	#absolute();
	top: 50%;
	left: 50%;
	margin-left: -@top-offset;
	margin-top: -@left-offset;
}

/* *************************** TEXT FCT (wrap, ellipsis)****** */
#text-wrap (@val: break-word) {
	overflow-wrap: @val;
	word-wrap: @val;
}

#ellipsis (@mw: 100%) {
	max-width: @mw;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}

/* *************************** BOX SHADOW FCT ****** */
#box-shadow (@shadow) {
	-webkit-box-shadow: @shadow;
	        box-shadow: @shadow;
}

/* *************************** OUTLINE FCT ****** */
#no-outline () {
	outline:none;
	-moz-outline:none;
	-webkit-outline:none;
}

/* *************************** SELECTION COLOR FCT ****** */
#selection-color (@color) when (iscolor(@color)) {
	::selection {
		background-color: @color;
	}
	
	::-moz-selection {
		background-color: @color;
	}
}

#selection-color (@rules) when (false = iscolor(@rules)) {
	::selection {
		@rules();
	}
	
	::-moz-selection {
		@rules();
	}
}
/* ### Flex class ### */

.flexbox {
	display: -ms-flexbox;
	display: -webkit-flex;
	display: flex;
}

.flexbox-inline {
	display: -ms-inline-flexbox;
	display: -webkit-inline-flex;
	display: inline-flex;
}

.flex-center {
	#flex-justify-content(center);
	#flex-align-items(center);
}

.flex-stretch {
	#flex-align-items(stretch);
}

.flex-align-items-start {
	#flex-align-items(flex-start);
}

.flex-align-items-center {
	#flex-align-items(center);
}

.flex-align-items-end {
	#flex-align-items(flex-end);
}

.flex-align-items-baseline {
	#flex-align-items(baseline);
}

.flex-justify-start {
	#flex-justify-content(flex-start);
}

.flex-justify-center {
	#flex-justify-content(center);
}

.flex-justify-end {
	#flex-justify-content(flex-end);
}

.flex-justify-space-between {
	#flex-justify-content(space-between);
}

.flex-justify-space-around {
	#flex-justify-content(space-around);
}

.flex-grow-2 {
	#flex-grow(2);
}

.flex-order-1 {
	#flex-order(1);
}

.flex-order-2 {
	#flex-order(2);
}

.flex-row {
	#flex-direction(row);
}

.flex-column {
	#flex-direction(column);
}

.flex-wrap {
	#flex-wrap(wrap);
}

.flex-nowrap {
	#flex-wrap(nowrap);
}

.flex-flow-row-wrap {
	#flex-direction(row);
	#flex-wrap(wrap);
}

.flex-flow-row-nowrap {
	#flex-direction(row);
	#flex-wrap(nowrap);
}

.flex-flow-column-wrap {
	#flex-direction(column);
	#flex-wrap(wrap);
}

.flex-flow-column-nowrap {
	#flex-direction(column);
	#flex-wrap(nowrap);
}

.flex-flow-column-to-desktop-row-wrap {
	.flex-flow-column-wrap;
	
	#mq-min-width(@screen-xs, {
		.flex-flow-row-wrap;
	});
}

.flex-flow-column-to-desktop-row-nowrap {
	.flex-flow-column-nowrap;
	
	#mq-min-width(@screen-xs, {
		.flex-flow-row-nowrap;
	});
}
//Source : https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes
//Source : http://css-tricks.com/snippets/css/a-guide-to-flexbox/
//Source : https://msdn.microsoft.com/en-us/library/ie/dn265027(v=vs.85).aspx

/* ### Flex Fct ### */

#flex-flow (@value: row wrap) {
	-webkit-flex-flow: @value;
			flex-flow: @value;
}

#flex-align-content (@value: center) {
	-webkit-align-content: @value;
			align-content: @value;
}

#flex-align-items (@value: center) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-webkit-align-items: @value;
		-ms-flex-align: @value;
			align-items: @value;
}

#flex-align-items (@value: center) when (@value = flex-start) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-align: start;
}

#flex-align-items (@value: center) when (@value = flex-end) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-align: end;
}

#flex-justify-content (@value: center) {
	-webkit-justify-content: @value;
		-ms-flex-pack: @value;
			justify-content: @value;
}

#flex-justify-content (@value: center) when (@value = flex-start) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-pack: start;
}

#flex-justify-content (@value: center) when (@value = flex-end) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-pack: end;
}

#flex-wrap (@value: wrap) {
	//For IE10- : "nowrap" = "none"
	-webkit-flex-wrap: @value;
		-ms-flex-wrap: @value;
			flex-wrap: @value;
}

#flex-wrap (@value: wrap) when (@value = nowrap) {
	//For IE10- : "nowrap" = "none"
	-ms-flex-wrap: none;
}

#flex-direction (@value: row) {
	-webkit-flex-direction: @value;
			flex-direction: @value;
}


/* ### Flex item ### */
#flex-order (@nb: 1) {
	-ms-flex-order: @nb;
	 -webkit-order: @nb;
			 order: @nb;
}

#flex-align-self (@value: stretch) {
	-webkit-align-self: @value;
		-ms-flex-item-align: @value;
			align-self: @value;
}

#flex-align-self (@value: stretch) when (@value = flex-start) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
		-ms-flex-item-align: start;
}

#flex-align-self (@value: stretch) when (@value = flex-end) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
		-ms-flex-item-align: end;
}

#flex-basis (@value: auto) {
	-webkit-flex-basis: @value;
			flex-basis: @value;
}


#flex-grow (@value: 2) {
	-webkit-flex-grow: @value;
			flex-grow: @value;
}

#flex-shrink (@value: 1) {
	-webkit-flex-shrink: @value;
			flex-shrink: @value;
}
//====== MIXINS ============
#font-size () {
	font-size: inherit;
	line-height: inherit;
}

#font-size (@size) {
	#font-size-ratio(@size);
}

#font-size (@size, @line-height) {
	font-size: @size;
	line-height: @line-height;
}

#font-size-ratio (@size, @ratio: @golden-ratio) {
	font-size: @size;
	line-height: @size * @ratio;
}

// ref: http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/
#font-face (@font-family, @font-filename: @font-family, @font-weight:normal, @font-style: normal) {
	font-family: @font-family;
	src: url("@{font-path}@{font-filename}.eot");
	src: local('?'),
		url("@{font-path}@{font-filename}.woff") format('woff'),
		url("@{font-path}@{font-filename}.ttf") format('truetype'),
		url("@{font-path}@{font-filename}.svg#@{font-family}") format('svg');
	font-weight: @font-weight;
	font-style: @font-style;
}

/*******************************
 * @author Bad Religion
 *****************************/

//=========================
// = Generator
// = Like a rock, like a planet, Like a fucking atom bomb,
// = ...
// = Like the blood on my door, it's the generator
//=========================
// = Will generate a class and data-class selectors automatically
//=========================

#generate(@class, @property, @valuename, @value) {
	#generate-no-mq(@class, @property, @valuename, @value);
	#generate-all-mq(@class, @property, @valuename, @value) 
}
#generate(@class, @value) {
	#generate(@class, @class, @value, @value);
}
#generate(@class, @valuename, @value) {
	#generate(@class, @class, @valuename, @value);
}

#generate-no-mq(@class, @property, @valuename, @value) {
	// No media query
	#generate-class(@class, @property, @valuename, @value);
	#generate-attribute(@class, @property, @valuename, @value);
}

#generate-all-mq(@class, @property, @valuename, @value) {
	// Min width (from-x)
	#generate-from(@class, @property, @valuename, @value);
	
	// Max width (to-x)
	#generate-to(@class, @property, @valuename, @value);
	
	// Min - Max width (from-x-to-y)
	#generate-from-to(@class, @property, @valuename, @value);
}

// Min width (from-x) ----------------------------------------------------------
#generate-from(@class, @property, @valuename, @value) {
	#generate-from(0, @class, @property, @valuename, @value);
	#generate-from(ip, @class, @property, @valuename, @value);
	#generate-from(ph, @class, @property, @valuename, @value);
	#generate-from(xs, @class, @property, @valuename, @value);
	#generate-from(sm, @class, @property, @valuename, @value);
	#generate-from(md, @class, @property, @valuename, @value);
	#generate-from(lg, @class, @property, @valuename, @value);
	#generate-from(xl, @class, @property, @valuename, @value);
}
#generate-from(@screenvalue, @class, @property, @valuename, @value) when (@screenvalue = 0) {
	#mq-min-width(0px, {
		#generate-attribute(@class, @property, "from-0-@{valuename}", @value);
	});
}
#generate-from(@screenvalue, @class, @property, @valuename, @value) when (default()) {
	@screen: 'screen-@{screenvalue}';
	#mq-min-width(@@screen, {
		#generate-attribute(@class, @property, "from-@{screenvalue}-@{valuename}", @value);
	});
}

// Max width (to-x) ------------------------------------------------------------
#generate-to(@class, @property, @valuename, @value) {
	#generate-to(xl, @class, @property, @valuename, @value);
	#generate-to(lg, @class, @property, @valuename, @value);
	#generate-to(md, @class, @property, @valuename, @value);
	#generate-to(sm, @class, @property, @valuename, @value);
	#generate-to(xs, @class, @property, @valuename, @value);
	#generate-to(ph, @class, @property, @valuename, @value);
	#generate-to(ip, @class, @property, @valuename, @value);
}
#generate-to(@screenvalue, @class, @property, @valuename, @value) when (default()) {
	@screen: 'screen-@{screenvalue}';
	#mq-max-width(@@screen, {
		#generate-attribute(@class, @property, "to-@{screenvalue}-@{valuename}", @value);
	});
}

// Min - Max width (from-x-to-y) -----------------------------------------------
#generate-from-to(@class, @property, @valuename, @value) {
	#generate-from-to(0, ip, @class, @property, @valuename, @value);
	#generate-from-to(0, ph, @class, @property, @valuename, @value);
	#generate-from-to(0, xs, @class, @property, @valuename, @value);
	#generate-from-to(0, sm, @class, @property, @valuename, @value);
	#generate-from-to(0, md, @class, @property, @valuename, @value);
	#generate-from-to(0, lg, @class, @property, @valuename, @value);
	#generate-from-to(0, xl, @class, @property, @valuename, @value);

	#generate-from-to(ip, ph, @class, @property, @valuename, @value);
	#generate-from-to(ip, xs, @class, @property, @valuename, @value);
	#generate-from-to(ip, sm, @class, @property, @valuename, @value);
	#generate-from-to(ip, md, @class, @property, @valuename, @value);
	#generate-from-to(ip, lg, @class, @property, @valuename, @value);
	#generate-from-to(ip, xl, @class, @property, @valuename, @value);

	#generate-from-to(ph, xs, @class, @property, @valuename, @value);
	#generate-from-to(ph, sm, @class, @property, @valuename, @value);
	#generate-from-to(ph, md, @class, @property, @valuename, @value);
	#generate-from-to(ph, lg, @class, @property, @valuename, @value);
	#generate-from-to(ph, xl, @class, @property, @valuename, @value);

	#generate-from-to(xs, sm, @class, @property, @valuename, @value);
	#generate-from-to(xs, md, @class, @property, @valuename, @value);
	#generate-from-to(xs, lg, @class, @property, @valuename, @value);
	#generate-from-to(xs, xl, @class, @property, @valuename, @value);

	#generate-from-to(sm, md, @class, @property, @valuename, @value);
	#generate-from-to(sm, lg, @class, @property, @valuename, @value);
	#generate-from-to(sm, xl, @class, @property, @valuename, @value);

	#generate-from-to(md, lg, @class, @property, @valuename, @value);
	#generate-from-to(md, xl, @class, @property, @valuename, @value);

	#generate-from-to(lg, xl, @class, @property, @valuename, @value);
}
#generate-from-to(@screenvaluefrom, @screenvalueto, @class, @property, @valuename, @value) when (@screenvaluefrom = 0) {
	@screento: 'screen-@{screenvalueto}';
	#mq-min-max-width(0px, @@screento, {
		#generate-attribute(@class, @property, "0-to-@{screenvalueto}-@{valuename}", @value);
	});
}
#generate-from-to(@screenvaluefrom, @screenvalueto, @class, @property, @valuename, @value) when (default()) {
	@screenfr: 'screen-@{screenvaluefrom}';
	@screento: 'screen-@{screenvalueto}';
	#mq-min-max-width(@@screenfr, @@screento, {
		#generate-attribute(@class, @property, "@{screenvaluefrom}-to-@{screenvalueto}-@{valuename}", @value);
	});
}

// Class (constants)
#generate-class(@class, @property, @valuename, @value) when(isstring(@valuename)) {
	@fixedvaluename: replace(@valuename, "/", "_");
	@selector: e(".@{class}-@{fixedvaluename}");
	@{selector} {
		@{property}: @value;
	}
}
#generate-class(@class, @property, @valuename, @value) when(default()) {
	@selector: e(".@{class}-@{valuename}");
	@{selector} {
		@{property}: @value;
	}
}

// Data-attribute (variable with the viewport)
#generate-attribute(@class, @property, @valuename, @value) {
	@attribute: e(%('[data-%s*=".%s;"]', @class, @valuename));
	@{attribute} {
		@{property}: @value;
	}
}

/**
 * Grid Base class
 */

// spacing
.gutter-left {
	padding-left: @gutter-width;
	#box-sizing();
}
.gutter-right {
	padding-right: @gutter-width;
	#box-sizing();
}
.margin-top {
	margin-top: @gutter-width;
	#box-sizing();
}
.margin-bottom {
	margin-bottom: @gutter-width;
	#box-sizing();
}

/**
 * Grid System
 */
@gutter-width: 1.6rem;

#generate-grid(@cols) {
	#generate-grid(@cols, width);
}
#generate-grid(@cols, @prop, @i: 1) when (@cols > 0) and (@i <= @cols) {
	#generate-attribute(@prop, @prop, '@{i}/@{cols}', percentage(@i/@cols));
	#generate-all-mq(@prop, @prop, '@{i}/@{cols}', percentage(@i/@cols));
	#generate-grid(@cols, @prop, @i + 1);
}
#generate-grid(@cols, @i: 0) when(default()) {}

//=========================
// = LAYOUT CLASS
//=========================



/****************** POSITION *********/
.absolute {
	position: absolute;
}

.fixed {
	position: fixed;
}

.relative {
	position: relative;
}


/****************** DISPLAY *********/
.block {
	display: block;
}

.inline-block {
	display: inline-block;
}

/****************** SIZE *********/
.fill {
	#fill();
}

.top {
	top: 0;
}

.left {
	left: 0;
}

.right {
	right: 0;
}

.bottom {
	bottom: 0;
}

.full-width {
	width: 100%;
}

.half-width {
	width: 100%;
	
	#mq-min-width(@screen-ph, {
		width: 50%;
	});
}

.half-min-width {
	min-width: 50%;
}

.full-height {
	height: 100%;
}

.half-height {
	height: 50%;
}

.float-left {
	float: left;
}

.float-right {
	float: right;
}

.clear {
	clear: both;
}

.clear-left {
	clear: left;
}

.clear-right {
	clear: right;
}

/* ********************* MARGIN *******/

.margin-auto {
	margin: auto;
}

.margin-auto-h {
	margin-left: auto;
	margin-right: auto;
}

/* ********************* VERTICAL ALIGN *******/
.valign-top {
	vertical-align: top;
}

.valign-bottom {
	vertical-align: bottom;
}

.valign-middle {
	vertical-align: middle;
}


.border-box {
	#box-sizing();
}

/* ********************* VERTICAL ALIGN *******/
.overflow-hidden {
	overflow: hidden;
}

.overflow-visible {
	overflow: visible;
}

.overflow-y-scroll {
	overflow-y: scroll;
}

//====== Medias Queries ============

#mq-min-width (@width, @rules) {
	@media screen and (min-width: @width) {
		@rules();
	}
}

#mq-max-width (@width, @rules) {
	@media screen and (max-width: @width) {
		@rules();
	}
}

#mq-min-max-width (@min-width, @max-width, @rules) {
	@media screen and (min-width: @min-width) and (max-width: @max-width) {
		@rules();
	}
}

#mq-min-height (@height, @rules) {
	@media screen and (min-height: @height) {
		@rules();
	}
}

#mq-max-height (@height, @rules) {
	@media screen and (max-height: @height) {
		@rules();
	}
}

#mq-max-dpi (@dpi, @rules) {
	@media screen and (max-resolution: @dpi) {
		@rules();
	}
}

#mq-min-dpi (@dpi, @rules) {
	@media screen and (min-resolution: @dpi) {
		@rules();
	}
}

#mq-px-ratio (@px-ratio, @rules) {
	@media screen and (-webkit-device-pixel-ratio: @px-ratio) {
		@rules();
	}
	
	@media screen and (device-pixel-ratio: @px-ratio) {
		@rules();
	}
}

#mq-min-px-ratio (@px-ratio, @rules) {
	@media screen and (-webkit-min-device-pixel-ratio: @px-ratio) {
		@rules();
	}
	
	@media screen and (min-device-pixel-ratio: @px-ratio) {
		@rules();
	}
}

#mq-orientation (@orientation, @rules) {
	@media screen and (orientation: @orientation) {
		@rules();
	}
}

//====== "Only" Queries ============

#only-mobile (@rules) {
	html.mobile &, &.mobile {
		@rules();
	}
}

#only-not-mobile (@rules) {
	html:not(.mobile) & {
		@rules();
	}
}

#only-phone (@rules) {
	html.mobile.phone &, &.mobile.phone {
		@rules();
	}
}

#only-not-phone (@rules) {
	html:not(.phone) & {
		@rules();
	}
}

/*******************************
 * @author DeuxHuitHuit
 *****************************/

//=========================
// = STATES PSEUDO CLASSES HELPERS
//=========================

#hover (@rules) {
	html:not(.mobile) &:hover, &:focus, &:active {
		@rules();
	}
}

#hover (@selected, @rules) {
	html:not(.mobile) &:hover, &:focus, &:active, &@{selected} {
		@rules();
	}
}

#hover-no-focus (@rules) {
	html:not(.mobile) &:hover, &:active {
		@rules();
	}
}

#hover-no-focus (@selected, @rules) {
	html:not(.mobile) &:hover, &:active, &@{selected} {
		@rules();
	}
}

#hover-only (@rules) {
	html:not(.mobile) &:hover {
		@rules();
	}
}

#hover-only (@selected, @rules) {
	html:not(.mobile) &:hover, &@{selected} {
		@rules();
	}
}
/*******************************
 * @author DeuxHuitHuit
 *****************************/

//=========================
// = REUSABLE TEXT CLASSES
//=========================

.text-bold, .bold {
	font-weight: bold;
}

.text-capital {
	text-transform: capitalize;
}

.text-upper, .upper {
	text-transform: uppercase;
}

.text-no-upper {
	text-transform: none;
}

.text-lower {
	text-transform: lower;
}

.text-center {
	text-align: center;
}

.text-left {
	text-align: left;
}

.text-right {
	text-align: right;
}

//::first-letter needs to be put on a block-like element
.first-letter-upper {
	&::first-letter {
		.upper;
	}
}
/**
 * Visibility classes
 */
 
.not-visible {
	visibility: hidden !important;
}

.collapse {
	visibility: collapse;
}

.visible {
	visibility: visible !important;
}

.hidden {
	display: none;
}

.off-screen {
	position: fixed;
	left: -100000px;
	right: -100000px;
	width: 0;
	height: 0;
}

#generate-visibility-classes (@suffix) {

	.not-visible-@{suffix} {
		visibility: hidden !important;
	}
	
	.collapse-@{suffix} {
		visibility: collapse;
	}
	
	.visible-@{suffix} {
		visibility: visible !important;
	}
	
	.hidden-@{suffix} {
		display: none;
	}
	
	.block-@{suffix} {
		display: block;
	}
	
	.inline-block-@{suffix} {
		display: inline-block;
	}
}

#mq-min-width(@screen-ip, {
	#generate-visibility-classes(ip);
});
#mq-min-width(@screen-ph, {
	#generate-visibility-classes(ph);
});
#mq-min-width(@screen-xs, {
	#generate-visibility-classes(xs);
});
#mq-min-width(@screen-sm, {
	#generate-visibility-classes(sm);
});
#mq-min-width(@screen-md, {
	#generate-visibility-classes(md);
});
#mq-min-width(@screen-lg, {
	#generate-visibility-classes(lg);
});
#mq-min-width(@screen-xl, {
	#generate-visibility-classes(xl);
});

//=========================
// = ZINDEX CLASS
//=========================

.z-index-1 {
	z-index: 1;
}

.z-index-5 {
	z-index: 5;
}

.z-index-10 {
	z-index: 10;
}

.z-index-15 {
	z-index: 15;
}

.z-index-20 {
	z-index: 20;
}

.z-index-25 {
	z-index: 25;
}

.z-index-50 {
	z-index: 50;
}

.z-index-100 {
	z-index: 100;
}

.z-index-200 {
	z-index: 200;
}

.z-index-300 {
	z-index: 300;
}

.z-index-400 {
	z-index: 400;
}

.z-index-500 {
	z-index: 500;
}

.z-index-1000 {
	z-index: 1000;
}

.z-index-10000 {
	z-index: 10000;
}
