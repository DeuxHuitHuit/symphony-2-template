
/************************************************************************
 * Grilles :
 *
 * Contrôle de la génération
 * @cols : {number}
 * @responsive : true/false | [ph, xs, sm, md, lg, xl]
 * @spacing : true/false | [micro, smallest, smaller, small, mid, large...]
 * @manual-spacing : true/false

 * .guttered-{spacing} — calcule les largeurs en incluant les marges
 * .spacing-{number} | spacing-{screen}-{number} — permet d'espacer manuellement les colonnes (ex: .col-4 dans .ctn-12 -> .spacing-3)
 * .auto-spacing — espace automatiquement les élements .col-1 dans le conteneur, selon son nombre de colonnes
 * .show-grid — affiche la grille à l'écran

 * # techniques
 * - ajouter un margin-bottom manuellement pour agrandir l'espace sous les rangées.

 * TODO
 * contrôle de la génération de l'affichage la grille
 * ajout des offsets marginaux
**************************************************************************************/

// mixin for displaying grid
#generate-grid-visualizer(
	@gutter-spacing: spacing-smaller,
	@grid: 12,
	@bodywidth: 100%,
	@gutter-color: @grid-visualizer-gutter-color,
	@baseline-color: @grid-visualizer-baseline-color,
	@column-color: @grid-visualizer-column-color) {
	@gutter-number: @grid - 1;
	@gutter-width: @@gutter-spacing;
	@gutters-total-width: @gutter-width * @gutter-number;
	@background-size: calc(~'(100% - @{gutters-total-width}) / @{grid} + @{gutter-width}');
	
	&:before {
		content: "";
		display: inline-block;
		z-index: 1000;
		
		pointer-events: none;
		position: absolute;
		width: @bodywidth;
		height: 100%;
		background-color: @column-color;
		top: auto;
		left: auto;
		right: 0;
		bottom: 0;
		background-image:
		 linear-gradient(to right, @column-color 0, @column-color calc(~'100% - @{gutter-width}'), @gutter-color calc(~'100% - @{gutter-width}'), @gutter-color 100%),
		 linear-gradient(to bottom, @baseline-color 1px, transparent 1px);
		background-size: @background-size 100%, 100% @spacing-small;
		background-origin: content-box;
	}
}

// recursive definitions
#generate-ctn (@n, @spacing, @manual-spacing: false, @offset: false) {
	.ctn-@{n} {
		// cols
		#generate-cols-in(@n);
		#generate-cols-offset(@n, @offset);
		#generate-cols-ex(@grid-nb-cols-max, @n);
		#generate-spaced-grid();

		&.show-grid when(@debug = true) {
			&.guttered-smaller {
				#generate-grid-visualizer(spacing-smaller, @n);
			}
			&.guttered-small {
				#generate-grid-visualizer(spacing-small, @n);
			}
			&.guttered-mid {
				#generate-grid-visualizer(spacing-mid, @n);
			}
			&.guttered-large {
				#generate-grid-visualizer(spacing-large, @n);
			}
		}
	}
	
	#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i < @n) {
		// col definition
		> .col-@{i} {
			width: percentage(@i / @n);
		}
		// recursion
		#generate-cols-in(@n, (@i + 1));
	}

	#generate-cols-offset(@n, @offset, @i: 1) when (@i > 0) and (@i < @n) and (@offset = true) {
		> .col-offset-@{i} {
			margin-left: percentage(@i / @n);
		}
		// recursion
		#generate-cols-offset(@n, @offset, (@i + 1));
	}
	
	
	#generate-spaced-cols(@grid-spacing, @n, @i: 1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@gutter-width: @@grid-spacing;
		@gutter-total-number: @n - 1;
		@gutters-total-width: @gutter-width * @gutter-total-number;
		@gutter-span-number: @i - 1;
		@gutters-span-width: @gutter-width * @gutter-span-number;
		@total-span-width: calc(~'(100% - @{gutters-total-width}) / @{n} * @{i} + @{gutters-span-width} - 0.5px');
		&.guttered-@{spacing-suffix} {
			> .col-@{i}	{
				width: @total-span-width;
			}
		}
		#generate-spaced-cols(@grid-spacing, @n, (@i + 1));

	}
	
	#generate-auto-spacing(@grid-spacing, @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @n + 1;
		&.guttered-@{spacing-suffix}.auto-spacing {
			> .col-1	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
				&:nth-of-type(@{n}n + 1) {
					margin-left: 0;
				}
				&:nth-of-type(n + @{second-row}) {
					margin-top: @spacing-value;
				}
			}
		}
	}

	#generate-manual-spacing(@grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @i + 1;
		&.guttered-@{spacing-suffix}.spacing-@{i} {
			> [class*="col-"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-"]:nth-of-type(@{i}n + 1) {
				margin-left: 0;
			}
			> [class*="col-"]:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
		#generate-manual-spacing(@grid-spacing, @n, (@i + 1));
	}


	#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n) {
		// col definition
		> .col-@{i} {
			width: 100%;
		}
		// recursion
		#generate-cols-ex(@n, (@i + 1));
	}

	#generate-spaced-grid() when (@spacing = true) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-auto-spacing(spacing-small, @n);
		#generate-auto-spacing(spacing-mid, @n);
		#generate-auto-spacing(spacing-large, @n);
		#generate-auto-spacing(spacing-larger, @n);
		#generate-auto-spacing(spacing-largest, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-spaced-cols(spacing-larger, @n);
		#generate-spaced-cols(spacing-largest, @n);
	}
	#generate-spaced-grid() when (@manual-spacing = true) {
		#generate-manual-spacing(spacing-smaller, @n);
		#generate-manual-spacing(spacing-small, @n);
		#generate-manual-spacing(spacing-mid, @n);
		#generate-manual-spacing(spacing-large, @n);
	}
	#generate-spaced-grid() when (@spacing = smaller) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-manual-spacing(spacing-smaller, @n);
	}
	#generate-spaced-grid() when (@spacing = small) {
		#generate-auto-spacing(spacing-small, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-manual-spacing(spacing-small, @n);
	}
	#generate-spaced-grid() when (@spacing = mid) {
		#generate-auto-spacing(spacing-mid, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-manual-spacing(spacing-mid, @n);
	}
	#generate-spaced-grid() when (@spacing = large) {
		#generate-auto-spacing(spacing-large, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-manual-spacing(spacing-large, @n);
	}
}
// recursive definitions
#generate-resp-ctn(@prefix, @n, @spacing, @manual-spacing: false, @offset) {
	.ctn-@{prefix}-@{n} {
		// cols
		#generate-cols-in(@n);
		// #generate-cols-ex(@n);
		
		// cols, resp
		#generate-resp-cols-in(@prefix, @n);
		
		#generate-resp-cols-offset(@prefix, @n, @offset);
		
		#generate-spaced-grid();
		// #generate-resp-cols-ex(@prefix, @n);

		&.show-grid when(@debug = true) {
			&.guttered-smaller {
				#generate-grid-visualizer(spacing-smaller, @n);
			}
			&.guttered-small {
				#generate-grid-visualizer(spacing-small, @n);
			}
			&.guttered-mid {
				#generate-grid-visualizer(spacing-mid, @n);
			}
			&.guttered-large {
				#generate-grid-visualizer(spacing-large, @n);
			}
		}

	}
	
	// standard
	#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i <= @n)  {
		// col definition
		> .col-@{i} {
			width: percentage(@i / @n);
		}
		// recursion
		#generate-cols-in(@n, (@i + 1));
	}
	#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n)  {
		// col definition
		> .col-@{i} {
			width: 100%;
		}
		// recursion
		#generate-cols-ex(@n, (@i + 1));
	}

	
	// included col
	#generate-resp-cols-in(@prefix, @n, @i: 0) when (@i >= 0) and (@i <= @n) {
		// col definition
		> .col-@{prefix}-@{i} when (@i > 0) {
			width: percentage(@i / @n);
		}
		
		// recursion
		#generate-resp-cols-in(@prefix, @n, (@i + 1));
	}
	#generate-resp-cols-offset(@prefix, @n, @offset, @i: 0) when (@i >= 0) and (@i < @n) and (@offset = true) {
		// col definition
		> .col-offset-@{prefix}-@{i} {
			margin-left: percentage(@i / @n);
		}
		
		// recursion
		#generate-resp-cols-offset(@prefix, @n, @offset, (@i + 1));
	}
	// excluded cols
	#generate-resp-cols-ex(@prefix, @n, @i: 1) when (@i > 0) and (@i <= @n) {
		// col definition
		> .col-@{prefix}-@{i} {
			width: 100%;
		}
		
		// recursion
		#generate-resp-cols-ex(@prefix, @n, (@i + 1));
	}

	#generate-spaced-cols(@grid-spacing, @n, @i: 1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@gutter-width: @@grid-spacing;
		@gutter-total-number: @n - 1;
		@gutters-total-width: @gutter-width * @gutter-total-number;
		@gutter-span-number: @i - 1;
		@gutters-span-width: @gutter-width * @gutter-span-number;
		@total-span-width: calc(~'(100% - @{gutters-total-width}) / @{n} * @{i} + @{gutters-span-width} - 0.5px');
		&.guttered-@{spacing-suffix} {
			> .col-@{i}	{
				width: @total-span-width;
			}
		}
		#generate-spaced-cols(@grid-spacing, @n, (@i + 1));
	}
	
	#generate-auto-spacing(@grid-spacing, @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @n + 1;
		&.guttered-@{spacing-suffix}.auto-spacing {
			> .col-1	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
				&:nth-of-type(@{n}n + 1) {
					margin-left: 0;
				}
				&:nth-of-type(n + @{second-row}) {
					margin-top: @spacing-value;
				}
			}
		}
	}

	#generate-manual-spacing(@grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @i + 1;
		&.guttered-@{spacing-suffix}.spacing-@{i} {
			> [class*="col-"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-"]:nth-of-type(@{i}n + 1) {
				margin-left: 0;
			}
			> [class*="col-"]:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
		#generate-manual-spacing(@grid-spacing, @n, (@i + 1));
	}

	#generate-resp-spaced-cols(@prefix, @grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@gutter-width: @@grid-spacing;
		@gutter-total-number: @n - 1;
		@gutters-total-width: @gutter-width * @gutter-total-number;
		@gutter-span-number: @i - 1;
		@gutters-span-width: @gutter-width * @gutter-span-number;
		@total-span-width: calc(~'(100% - @{gutters-total-width}) / @{n} * @{i} + @{gutters-span-width} - 0.5px');
		&.guttered-@{spacing-suffix} {
			> .col-@{prefix}-@{i} when (@i > 0)	{
				width: @total-span-width;
			}
		}
		#generate-resp-spaced-cols(@prefix, @grid-spacing, @n, (@i + 1))
	}
	
	#generate-resp-auto-spacing(@prefix, @grid-spacing, @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @n + 1;
		&.guttered-@{spacing-suffix}.auto-spacing {
			> [class*="col-@{prefix}-1"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				+ [class*="col-@{prefix}-1"] {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-@{prefix}-1"]:nth-of-type(@{n}n + 1) {
				margin-left: 0;
			}
			> .col-1:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
	}
	#generate-resp-manual-spacing(@prefix, @grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @i + 1;
		&.guttered-@{spacing-suffix}.spacing-@{prefix}-@{i} {
			> [class*="col-"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-"]:nth-of-type(@{i}n + 1) {
				margin-left: 0;
			}
			> [class*="col-"]:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
		#generate-resp-manual-spacing(@prefix, @grid-spacing, @n, (@i + 1));
	}
	#generate-spaced-grid() when (@spacing = true) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-auto-spacing(spacing-small, @n);
		#generate-auto-spacing(spacing-mid, @n);
		#generate-auto-spacing(spacing-large, @n);
		#generate-auto-spacing(spacing-larger, @n);
		#generate-auto-spacing(spacing-largest, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-spaced-cols(spacing-larger, @n);
		#generate-spaced-cols(spacing-largest, @n);
		#generate-resp-auto-spacing(@prefix, spacing-smaller, @n);
		#generate-resp-auto-spacing(@prefix, spacing-small, @n);
		#generate-resp-auto-spacing(@prefix, spacing-mid, @n);
		#generate-resp-auto-spacing(@prefix, spacing-large, @n);
		#generate-resp-auto-spacing(@prefix, spacing-larger, @n);
		#generate-resp-auto-spacing(@prefix, spacing-largest, @n);
		#generate-resp-spaced-cols(@prefix, spacing-smaller, @n);
		#generate-resp-spaced-cols(@prefix, spacing-small, @n);
		#generate-resp-spaced-cols(@prefix, spacing-mid, @n);
		#generate-resp-spaced-cols(@prefix, spacing-large, @n);
		#generate-resp-spaced-cols(@prefix, spacing-larger, @n);
		#generate-resp-spaced-cols(@prefix, spacing-largest, @n);
	}
	// #generate-spaced-grid() when (@manual-spacing = true) {
	// 	#generate-manual-spacing(spacing-smaller, @n);
	// 	#generate-manual-spacing(spacing-small, @n);
	// 	#generate-manual-spacing(spacing-mid, @n);
	// 	#generate-manual-spacing(spacing-large, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-smaller, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-small, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-mid, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-large, @n);
	// }
	#generate-spaced-grid() when (@spacing = smaller) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-resp-auto-spacing(@prefix, spacing-smaller, @n);
		#generate-resp-spaced-cols(@prefix, spacing-smaller, @n);
	}
	#generate-spaced-grid() when (@spacing = small) {
		#generate-auto-spacing(spacing-small, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-resp-auto-spacing(@prefix, spacing-small, @n);
		#generate-resp-spaced-cols(@prefix, spacing-small, @n);
	}
	#generate-spaced-grid() when (@spacing = mid) {
		#generate-auto-spacing(spacing-mid, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-resp-auto-spacing(@prefix, spacing-mid, @n);
		#generate-resp-spaced-cols(@prefix, spacing-mid, @n);
	}
	#generate-spaced-grid() when (@spacing = large) {
		#generate-auto-spacing(spacing-large, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-resp-auto-spacing(@prefix, spacing-large, @n);
		#generate-resp-spaced-cols(@prefix, spacing-large, @n);
	}
}

// not responsive
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = false) {
		#generate-ctn(@cols, @spacing, @manual-spacing, @offset);
}

// fully responsive
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = true) {
		#generate-ctn(@cols, @spacing, @manual-spacing, @offset);
		#mq-min-width(@screen-ph, { #generate-resp-ctn(ph, @cols, @spacing, @manual-spacing, @offset); });		
		#mq-min-width(@screen-xs, { #generate-resp-ctn(xs, @cols, @spacing, @manual-spacing, @offset); });
		#mq-min-width(@screen-sm, { #generate-resp-ctn(sm, @cols, @spacing, @manual-spacing, @offset); });
		#mq-min-width(@screen-md, { #generate-resp-ctn(md, @cols, @spacing, @manual-spacing, @offset); });
		#mq-min-width(@screen-lg, { #generate-resp-ctn(lg, @cols, @spacing, @manual-spacing, @offset); });
		// #mq-min-width(@screen-xl, { #generate-resp-ctn(xl, @cols, @spacing, @manual-spacing, @offset); });
		#mq-desktop-design({ #generate-resp-ctn(desktop, @cols, @spacing, @manual-spacing, @offset); });		
}

#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = ph) {
		#mq-min-width(@screen-ph, { #generate-resp-ctn(ph, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = xs) {
		#mq-min-width(@screen-xs, { #generate-resp-ctn(xs, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = sm) {
		#mq-min-width(@screen-sm, { #generate-resp-ctn(sm, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = md) {
		#mq-min-width(@screen-md, { #generate-resp-ctn(md, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = lg) {
		#mq-min-width(@screen-lg, { #generate-resp-ctn(lg, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = xl) {
		#mq-min-width(@screen-xl, { 
			#generate-resp-ctn(xl, @cols, @spacing, @manual-spacing); 
		});
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = desktop) {
		#mq-desktop-design({ #generate-resp-ctn(desktop, @cols, @spacing, @manual-spacing); });
}

/*
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false);*/