
//=========================
// = ANIMATION FUNCTIONS
//=========================

#animation (...) {
	-webkit-animation: @arguments;
	   -moz-animation: @arguments;
	    -ms-animation: @arguments;
		 -o-animation: @arguments;
			animation: @arguments;
}

#animation-key (@name, @rules) {
	@-webkit-keyframes @name {
		@rules();
	}
	
	@-moz-keyframes @name {
		@rules();
	}
	
	@-ms-keyframes @name {
		@rules();
	}
	
	@-o-keyframes @name {
		@rules();
	}

	//Standard syntax
	@keyframes @name {
		@rules();
	}
}

//=========================
// = BACKFACE-VISIBILITY FUNCTIONS
//=========================

#backface (@visibility: hidden) {
	-webkit-backface-visibility: @visibility;
	   -moz-backface-visibility: @visibility;
	    -ms-backface-visibility: @visibility;
		 -o-backface-visibility: @visibility;
			backface-visibility: @visibility;
}

//=========================
// = BACKGROUND-SIZE FUNCTIONS
//=========================

#background-size (@bs: cover) {
	-webkit-background-size: @bs;
	   -moz-background-size: @bs;
		-ms-background-size: @bs;
		 -o-background-size: @bs;
			background-size: @bs;
}

//=========================
// = BORDER-RADIUS FUNCTIONS
//=========================

#border-radius (@br) {
	-webkit-border-radius: @br;
	   -moz-border-radius: @br;
			border-radius: @br;
}

//=========================
// = BOX-SHADOW FUNCTIONS
//=========================

#box-shadow (@shadow) {
	-webkit-box-shadow: @shadow;
	        box-shadow: @shadow;
}

//=========================
// = BOX-SIZING FUNCTIONS
//=========================

#box-sizing (@box-sizing: border-box) {
	-webkit-box-sizing: @box-sizing;
	   -moz-box-sizing: @box-sizing;
		-ms-box-sizing: @box-sizing;
		 -o-box-sizing: @box-sizing;
			box-sizing: @box-sizing;
}

//=========================
// = MULTIPLE COLUMNS FUNCTIONS
//=========================

#column-count (@column-count) {
	-webkit-column-count: @column-count;
	   -moz-column-count: @column-count;
	        column-count: @column-count;
}

#column-gap (@column-gap) {
	-webkit-column-gap: @column-gap;
	   -moz-column-gap: @column-gap;
	        column-gap: @column-gap;
}

#column-span (@column-span) {
	-webkit-column-span: @column-span;
	-moz-column-span: @column-span;
	column-span: @column-span;
}


//=========================
// = DEVICE FUNCTIONS
//=========================
/*
#device-mobile (@rules) {
	html.mobile &, &.mobile {
		@rules();
	}
}

#device-not-mobile (@rules) {
	html:not(.mobile) & {
		@rules();
	}
}

#device-phone (@rules) {
	html.mobile.phone &, &.mobile.phone {
		@rules();
	}
}

#device-not-phone (@rules) {
	html:not(.phone) & {
		@rules();
	}
}
*/

//=========================
// = ADD/REMOVE GRAYSCALE FILTER FUNCTIONS
//=========================

#add-grayscale (){
	//Firefox 4+
	filter: url(~"@{svg-path}grayscale.svg#grayscale");
	//IE 6-9
	filter: gray; 
	
	-webkit-filter: grayscale(100%);
}

#remove-grayscale (){
	-webkit-filter: grayscale(0%);

	//Firefox 4+
	//IE 6-9
	filter: none;
}

//=========================
// = FILTER FUNCTION
//=========================

/* FILTER */
#filter (@filter) {
	-webkit-filter: @filter;
	   -moz-filter: @filter;
		-ms-filter: @filter;
		 -o-filter: @filter;
			filter: @filter;
}

//=========================
// = FLEX FUNCTIONS
//=========================

//Source : https://developer.mozilla.org/en-US/docs/Web/Guide/CSS/Flexible_boxes
//Source : http://css-tricks.com/snippets/css/a-guide-to-flexbox/
//Source : https://msdn.microsoft.com/en-us/library/ie/dn265027(v=vs.85).aspx

#flex-flow (@value: row wrap) {
	-webkit-flex-flow: @value;
			flex-flow: @value;
}

#flex-align-content (@value: center) {
	-webkit-align-content: @value;
			align-content: @value;
}

#flex-align-items (@value: center) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-webkit-align-items: @value;
		-ms-flex-align: @value;
			align-items: @value;
}

#flex-align-items (@value: center) when (@value = flex-start) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-align: start;
}

#flex-align-items (@value: center) when (@value = flex-end) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-align: end;
}

#flex-justify-content (@value: center) {
	-webkit-justify-content: @value;
		-ms-flex-pack: @value;
			justify-content: @value;
}

#flex-justify-content (@value: center) when (@value = flex-start) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-pack: start;
}

#flex-justify-content (@value: center) when (@value = flex-end) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
	-ms-flex-pack: end;
}

#flex-wrap (@value: wrap) {
	//For IE10- : "nowrap" = "none"
	-webkit-flex-wrap: @value;
		-ms-flex-wrap: @value;
			flex-wrap: @value;
}

#flex-wrap (@value: wrap) when (@value = nowrap) {
	//For IE10- : "nowrap" = "none"
	-ms-flex-wrap: none;
}

#flex-direction (@value: row) {
	-webkit-flex-direction: @value;
			flex-direction: @value;
}


/* ### Flex item ### */
#flex-order (@nb: 1) {
	-ms-flex-order: @nb;
	 -webkit-order: @nb;
			 order: @nb;
}

#flex-align-self (@value: stretch) {
	-webkit-align-self: @value;
		-ms-flex-item-align: @value;
			align-self: @value;
}

#flex-align-self (@value: stretch) when (@value = flex-start) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
		-ms-flex-item-align: start;
}

#flex-align-self (@value: stretch) when (@value = flex-end) {
	//For IE10- : "flex-start" = "start" and "flex-end" = "end"
		-ms-flex-item-align: end;
}

#flex-basis (@value: auto) {
	-webkit-flex-basis: @value;
			flex-basis: @value;
}


#flex-grow (@value: 2) {
	-webkit-flex-grow: @value;
			flex-grow: @value;
}

#flex-shrink (@value: 1) {
	-webkit-flex-shrink: @value;
			flex-shrink: @value;
}

//=========================
// = FONTS FUNCTIONS
//=========================

// ref: http://www.paulirish.com/2009/bulletproof-font-face-implementation-syntax/
#font-face (@font-family, @font-filename: @font-family, @font-weight:normal, @font-style: normal) {
	font-family: @font-family;
	src: url("@{font-path}@{font-filename}.eot");
	src: local('?'),
		url("@{font-path}@{font-filename}.woff") format('woff'),
		url("@{font-path}@{font-filename}.ttf") format('truetype'),
		url("@{font-path}@{font-filename}.svg#@{font-family}") format('svg');
	font-weight: @font-weight;
	font-style: @font-style;
}


//=========================
// = GRADIENTS FUNCTIONS
//=========================

#gradient {

	// Horizontal gradient, from left to right
	//
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
	.horizontal (@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
		background-image: -webkit-gradient(linear, @start-percent top, @end-percent top, from(@start-color), to(@end-color)); // Safari 4+, Chrome 2+
		background-image: -webkit-linear-gradient(left, color-stop(@start-color @start-percent), color-stop(@end-color @end-percent)); // Safari 5.1+, Chrome 10+
		background-image: -moz-linear-gradient(left, @start-color @start-percent, @end-color @end-percent); // FF 3.6+
		background-image:  linear-gradient(to right, @start-color @start-percent, @end-color @end-percent); // Standard, IE10
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down
	}

	// Vertical gradient, from top to bottom
	//
	// Creates two color stops, start and end, by specifying a color and position for each color stop.
	// Color stops are not available in IE9 and below.
	.vertical (@start-color: #555; @end-color: #333; @start-percent: 0%; @end-percent: 100%) {
		background-image: -webkit-gradient(linear, left @start-percent, left @end-percent, from(@start-color), to(@end-color)); // Safari 4+, Chrome 2+
		background-image: -webkit-linear-gradient(top, @start-color @start-percent, @end-color @end-percent); // Safari 5.1+, Chrome 10+
		background-image:  -moz-linear-gradient(top, @start-color @start-percent, @end-color @end-percent); // FF 3.6+
		background-image: linear-gradient(to bottom, @start-color @start-percent, @end-color @end-percent); // Standard, IE10
		background-repeat: repeat-x;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down
	}

	.directional (@start-color: #555; @end-color: #333; @deg: 45deg) {
		background-repeat: repeat-x;
		background-image: -webkit-linear-gradient(@deg, @start-color, @end-color); // Safari 5.1+, Chrome 10+
		background-image: -moz-linear-gradient(@deg, @start-color, @end-color); // FF 3.6+
		background-image: linear-gradient(@deg, @start-color, @end-color); // Standard, IE10
	}

	.horizontal-three-colors (@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
		background-image: -webkit-gradient(left, linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @mid-color), to(@end-color));
		background-image: -webkit-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
		background-image: -moz-linear-gradient(left, @start-color, @mid-color @color-stop, @end-color);
		background-image: linear-gradient(to right, @start-color, @mid-color @color-stop, @end-color);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=1)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
	}

	.vertical-three-colors (@start-color: #00b3ee; @mid-color: #7a43b6; @color-stop: 50%; @end-color: #c3325f) {
		background-image: -webkit-gradient(linear, 0 0, 0 100%, from(@start-color), color-stop(@color-stop, @mid-color), to(@end-color));
		background-image: -webkit-linear-gradient(@start-color, @mid-color @color-stop, @end-color);
		background-image: -moz-linear-gradient(top, @start-color, @mid-color @color-stop, @end-color);
		background-image: linear-gradient(@start-color, @mid-color @color-stop, @end-color);
		background-repeat: no-repeat;
		filter: e(%("progid:DXImageTransform.Microsoft.gradient(startColorstr='%d', endColorstr='%d', GradientType=0)",argb(@start-color),argb(@end-color))); // IE9 and down, gets no color-stop at all for proper fallback
	}

	.radial (@inner-color: #555; @outer-color: #333; @x-origin: center; @y-origin: center) {
		background-image: -webkit-gradient(radial, @x-origin @y-origin, 0, @x-origin @y-origin, 1011, from(@inner-color), to(@outer-color));
		background-image: -webkit-radial-gradient(@x-origin @y-origin, ellipse farthest-corner, @inner-color 0%, @outer-color 100%);
		background-image: -moz-radial-gradient(@x-origin @y-origin, ellipse farthest-corner, @inner-color 0%, @outer-color 100%);
		background-image: radial-gradient(ellipse farthest-corner at @x-origin @y-origin, @inner-color 0%, @outer-color 100%);
		background-repeat: no-repeat;
	}
 
	.striped (@color: rgba(255,255,255,.15); @angle: 45deg) {
		background-image: -webkit-gradient(linear, 0 100%, 100% 0, color-stop(.25, @color), color-stop(.25, transparent), color-stop(.5, transparent), color-stop(.5, @color), color-stop(.75, @color), color-stop(.75, transparent), to(transparent));
		background-image: -webkit-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
		background-image: -moz-linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
		background-image: linear-gradient(@angle, @color 25%, transparent 25%, transparent 50%, @color 50%, @color 75%, transparent 75%, transparent);
	}
}

/************************************************************************
 * Grilles :
 *
 * Contrôle de la génération
 * @cols : {number}
 * @responsive : true/false | [ph, xs, sm, md, lg, xl]
 * @spacing : true/false | [micro, smallest, smaller, small, mid, large...]
 * @manual-spacing : true/false

 * .guttered-{spacing} — calcule les largeurs en incluant les marges
 * .spacing-{number} | spacing-{screen}-{number} — permet d'espacer manuellement les colonnes (ex: .col-4 dans .ctn-12 -> .spacing-3)
 * .auto-spacing — espace automatiquement les élements .col-1 dans le conteneur, selon son nombre de colonnes
 * .show-grid — affiche la grille à l'écran

 * # techniques
 * - ajouter un margin-bottom manuellement pour agrandir l'espace sous les rangées.

 * TODO
 * contrôle de la génération de l'affichage la grille
 * ajout des offsets marginaux
**************************************************************************************/

// mixin for displaying grid
#generate-grid-visualizer(
	@gutter-spacing: spacing-smaller,
	@grid: 12,
	@bodywidth: 100%,
	@gutter-color: @grid-visualizer-gutter-color,
	@baseline-color: @grid-visualizer-baseline-color,
	@column-color: @grid-visualizer-column-color) {
	@gutter-number: @grid - 1;
	@gutter-width: @@gutter-spacing;
	@gutters-total-width: @gutter-width * @gutter-number;
	@background-size: calc(~'(100% - @{gutters-total-width}) / @{grid} + @{gutter-width}');
	
	&:before {
		content: "";
		display: inline-block;
		z-index: 1000;
		
		pointer-events: none;
		position: absolute;
		width: @bodywidth;
		height: 100%;
		background-color: @column-color;
		top: auto;
		left: auto;
		right: 0;
		bottom: 0;
		background-image:
		 linear-gradient(to right, @column-color 0, @column-color calc(~'100% - @{gutter-width}'), @gutter-color calc(~'100% - @{gutter-width}'), @gutter-color 100%),
		 linear-gradient(to bottom, @baseline-color 1px, transparent 1px);
		background-size: @background-size 100%, 100% @spacing-small;
		background-origin: content-box;
	}
}

// recursive definitions
#generate-ctn (@n, @spacing, @manual-spacing: false, @offset: false) {
	.ctn-@{n} {
		// cols
		#generate-cols-in(@n);
		#generate-cols-offset(@n, @offset);
		#generate-cols-ex(@grid-nb-cols-max, @n);
		#generate-spaced-grid();

		&.show-grid when(@debug = true) {
			&.guttered-smaller {
				#generate-grid-visualizer(spacing-smaller, @n);
			}
			&.guttered-small {
				#generate-grid-visualizer(spacing-small, @n);
			}
			&.guttered-mid {
				#generate-grid-visualizer(spacing-mid, @n);
			}
			&.guttered-large {
				#generate-grid-visualizer(spacing-large, @n);
			}
		}
	}
	
	#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i < @n) {
		// col definition
		> .col-@{i} {
			width: percentage(@i / @n);
		}
		// recursion
		#generate-cols-in(@n, (@i + 1));
	}

	#generate-cols-offset(@n, @offset, @i: 1) when (@i > 0) and (@i < @n) and (@offset = true) {
		> .col-offset-@{i} {
			margin-left: percentage(@i / @n);
		}
		// recursion
		#generate-cols-offset(@n, @offset, (@i + 1));
	}
	
	
	#generate-spaced-cols(@grid-spacing, @n, @i: 1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@gutter-width: @@grid-spacing;
		@gutter-total-number: @n - 1;
		@gutters-total-width: @gutter-width * @gutter-total-number;
		@gutter-span-number: @i - 1;
		@gutters-span-width: @gutter-width * @gutter-span-number;
		@total-span-width: calc(~'(100% - @{gutters-total-width}) / @{n} * @{i} + @{gutters-span-width} - 0.5px');
		&.guttered-@{spacing-suffix} {
			> .col-@{i}	{
				width: @total-span-width;
			}
		}
		#generate-spaced-cols(@grid-spacing, @n, (@i + 1));

	}
	
	#generate-auto-spacing(@grid-spacing, @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @n + 1;
		&.guttered-@{spacing-suffix}.auto-spacing {
			> .col-1	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
				&:nth-of-type(@{n}n + 1) {
					margin-left: 0;
				}
				&:nth-of-type(n + @{second-row}) {
					margin-top: @spacing-value;
				}
			}
		}
	}

	#generate-manual-spacing(@grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @i + 1;
		&.guttered-@{spacing-suffix}.spacing-@{i} {
			> [class*="col-"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-"]:nth-of-type(@{i}n + 1) {
				margin-left: 0;
			}
			> [class*="col-"]:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
		#generate-manual-spacing(@grid-spacing, @n, (@i + 1));
	}


	#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n) {
		// col definition
		> .col-@{i} {
			width: 100%;
		}
		// recursion
		#generate-cols-ex(@n, (@i + 1));
	}

	#generate-spaced-grid() when (@spacing = true) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-auto-spacing(spacing-small, @n);
		#generate-auto-spacing(spacing-mid, @n);
		#generate-auto-spacing(spacing-large, @n);
		#generate-auto-spacing(spacing-larger, @n);
		#generate-auto-spacing(spacing-largest, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-spaced-cols(spacing-larger, @n);
		#generate-spaced-cols(spacing-largest, @n);
	}
	#generate-spaced-grid() when (@manual-spacing = true) {
		#generate-manual-spacing(spacing-smaller, @n);
		#generate-manual-spacing(spacing-small, @n);
		#generate-manual-spacing(spacing-mid, @n);
		#generate-manual-spacing(spacing-large, @n);
	}
	#generate-spaced-grid() when (@spacing = smaller) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-manual-spacing(spacing-smaller, @n);
	}
	#generate-spaced-grid() when (@spacing = small) {
		#generate-auto-spacing(spacing-small, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-manual-spacing(spacing-small, @n);
	}
	#generate-spaced-grid() when (@spacing = mid) {
		#generate-auto-spacing(spacing-mid, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-manual-spacing(spacing-mid, @n);
	}
	#generate-spaced-grid() when (@spacing = large) {
		#generate-auto-spacing(spacing-large, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-manual-spacing(spacing-large, @n);
	}
}
// recursive definitions
#generate-resp-ctn(@prefix, @n, @spacing, @manual-spacing: false, @offset) {
	.ctn-@{prefix}-@{n} {
		// cols
		#generate-cols-in(@n);
		// #generate-cols-ex(@n);
		
		// cols, resp
		#generate-resp-cols-in(@prefix, @n);
		
		#generate-resp-cols-offset(@prefix, @n, @offset);
		
		#generate-spaced-grid();
		// #generate-resp-cols-ex(@prefix, @n);

		&.show-grid when(@debug = true) {
			&.guttered-smaller {
				#generate-grid-visualizer(spacing-smaller, @n);
			}
			&.guttered-small {
				#generate-grid-visualizer(spacing-small, @n);
			}
			&.guttered-mid {
				#generate-grid-visualizer(spacing-mid, @n);
			}
			&.guttered-large {
				#generate-grid-visualizer(spacing-large, @n);
			}
		}

	}
	
	// standard
	#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i <= @n)  {
		// col definition
		> .col-@{i} {
			width: percentage(@i / @n);
		}
		// recursion
		#generate-cols-in(@n, (@i + 1));
	}
	#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n)  {
		// col definition
		> .col-@{i} {
			width: 100%;
		}
		// recursion
		#generate-cols-ex(@n, (@i + 1));
	}

	
	// included col
	#generate-resp-cols-in(@prefix, @n, @i: 0) when (@i >= 0) and (@i <= @n) {
		// col definition
		> .col-@{prefix}-@{i} when (@i > 0) {
			width: percentage(@i / @n);
		}
		
		// recursion
		#generate-resp-cols-in(@prefix, @n, (@i + 1));
	}
	#generate-resp-cols-offset(@prefix, @n, @offset, @i: 0) when (@i >= 0) and (@i < @n) and (@offset = true) {
		// col definition
		> .col-offset-@{prefix}-@{i} {
			margin-left: percentage(@i / @n);
		}
		
		// recursion
		#generate-resp-cols-offset(@prefix, @n, @offset, (@i + 1));
	}
	// excluded cols
	#generate-resp-cols-ex(@prefix, @n, @i: 1) when (@i > 0) and (@i <= @n) {
		// col definition
		> .col-@{prefix}-@{i} {
			width: 100%;
		}
		
		// recursion
		#generate-resp-cols-ex(@prefix, @n, (@i + 1));
	}

	#generate-spaced-cols(@grid-spacing, @n, @i: 1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@gutter-width: @@grid-spacing;
		@gutter-total-number: @n - 1;
		@gutters-total-width: @gutter-width * @gutter-total-number;
		@gutter-span-number: @i - 1;
		@gutters-span-width: @gutter-width * @gutter-span-number;
		@total-span-width: calc(~'(100% - @{gutters-total-width}) / @{n} * @{i} + @{gutters-span-width} - 0.5px');
		&.guttered-@{spacing-suffix} {
			> .col-@{i}	{
				width: @total-span-width;
			}
		}
		#generate-spaced-cols(@grid-spacing, @n, (@i + 1));
	}
	
	#generate-auto-spacing(@grid-spacing, @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @n + 1;
		&.guttered-@{spacing-suffix}.auto-spacing {
			> .col-1	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
				&:nth-of-type(@{n}n + 1) {
					margin-left: 0;
				}
				&:nth-of-type(n + @{second-row}) {
					margin-top: @spacing-value;
				}
			}
		}
	}

	#generate-manual-spacing(@grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @i + 1;
		&.guttered-@{spacing-suffix}.spacing-@{i} {
			> [class*="col-"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-"]:nth-of-type(@{i}n + 1) {
				margin-left: 0;
			}
			> [class*="col-"]:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
		#generate-manual-spacing(@grid-spacing, @n, (@i + 1));
	}

	#generate-resp-spaced-cols(@prefix, @grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@gutter-width: @@grid-spacing;
		@gutter-total-number: @n - 1;
		@gutters-total-width: @gutter-width * @gutter-total-number;
		@gutter-span-number: @i - 1;
		@gutters-span-width: @gutter-width * @gutter-span-number;
		@total-span-width: calc(~'(100% - @{gutters-total-width}) / @{n} * @{i} + @{gutters-span-width} - 0.5px');
		&.guttered-@{spacing-suffix} {
			> .col-@{prefix}-@{i} when (@i > 0)	{
				width: @total-span-width;
			}
		}
		#generate-resp-spaced-cols(@prefix, @grid-spacing, @n, (@i + 1))
	}
	
	#generate-resp-auto-spacing(@prefix, @grid-spacing, @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @n + 1;
		&.guttered-@{spacing-suffix}.auto-spacing {
			> [class*="col-@{prefix}-1"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				+ [class*="col-@{prefix}-1"] {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-@{prefix}-1"]:nth-of-type(@{n}n + 1) {
				margin-left: 0;
			}
			> .col-1:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
	}
	#generate-resp-manual-spacing(@prefix, @grid-spacing, @n, @i:1) when (@i > 0) and (@i <= @n) {
		@spacing-suffix: replace(@grid-spacing, "spacing-", "");
		@spacing-value: @@grid-spacing;
		@second-row: @i + 1;
		&.guttered-@{spacing-suffix}.spacing-@{prefix}-@{i} {
			> [class*="col-"]	{
				margin-left: 0;
				margin-right: 0;
				&:nth-of-type(n) {
					margin-top: 0;
				}
				&:nth-of-type(n + 1) {
					margin-left: @spacing-value;
				}
			}
			> [class*="col-"]:nth-of-type(@{i}n + 1) {
				margin-left: 0;
			}
			> [class*="col-"]:nth-of-type(n + @{second-row}) {
				margin-top: @spacing-value;
			}
		}
		#generate-resp-manual-spacing(@prefix, @grid-spacing, @n, (@i + 1));
	}
	#generate-spaced-grid() when (@spacing = true) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-auto-spacing(spacing-small, @n);
		#generate-auto-spacing(spacing-mid, @n);
		#generate-auto-spacing(spacing-large, @n);
		#generate-auto-spacing(spacing-larger, @n);
		#generate-auto-spacing(spacing-largest, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-spaced-cols(spacing-larger, @n);
		#generate-spaced-cols(spacing-largest, @n);
		#generate-resp-auto-spacing(@prefix, spacing-smaller, @n);
		#generate-resp-auto-spacing(@prefix, spacing-small, @n);
		#generate-resp-auto-spacing(@prefix, spacing-mid, @n);
		#generate-resp-auto-spacing(@prefix, spacing-large, @n);
		#generate-resp-auto-spacing(@prefix, spacing-larger, @n);
		#generate-resp-auto-spacing(@prefix, spacing-largest, @n);
		#generate-resp-spaced-cols(@prefix, spacing-smaller, @n);
		#generate-resp-spaced-cols(@prefix, spacing-small, @n);
		#generate-resp-spaced-cols(@prefix, spacing-mid, @n);
		#generate-resp-spaced-cols(@prefix, spacing-large, @n);
		#generate-resp-spaced-cols(@prefix, spacing-larger, @n);
		#generate-resp-spaced-cols(@prefix, spacing-largest, @n);
	}
	// #generate-spaced-grid() when (@manual-spacing = true) {
	// 	#generate-manual-spacing(spacing-smaller, @n);
	// 	#generate-manual-spacing(spacing-small, @n);
	// 	#generate-manual-spacing(spacing-mid, @n);
	// 	#generate-manual-spacing(spacing-large, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-smaller, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-small, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-mid, @n);
	// 	#generate-resp-manual-spacing(@prefix, spacing-large, @n);
	// }
	#generate-spaced-grid() when (@spacing = smaller) {
		#generate-auto-spacing(spacing-smaller, @n);
		#generate-spaced-cols(spacing-smaller, @n);
		#generate-resp-auto-spacing(@prefix, spacing-smaller, @n);
		#generate-resp-spaced-cols(@prefix, spacing-smaller, @n);
	}
	#generate-spaced-grid() when (@spacing = small) {
		#generate-auto-spacing(spacing-small, @n);
		#generate-spaced-cols(spacing-small, @n);
		#generate-resp-auto-spacing(@prefix, spacing-small, @n);
		#generate-resp-spaced-cols(@prefix, spacing-small, @n);
	}
	#generate-spaced-grid() when (@spacing = mid) {
		#generate-auto-spacing(spacing-mid, @n);
		#generate-spaced-cols(spacing-mid, @n);
		#generate-resp-auto-spacing(@prefix, spacing-mid, @n);
		#generate-resp-spaced-cols(@prefix, spacing-mid, @n);
	}
	#generate-spaced-grid() when (@spacing = large) {
		#generate-auto-spacing(spacing-large, @n);
		#generate-spaced-cols(spacing-large, @n);
		#generate-resp-auto-spacing(@prefix, spacing-large, @n);
		#generate-resp-spaced-cols(@prefix, spacing-large, @n);
	}
}

// not responsive
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = false) {
		#generate-ctn(@cols, @spacing, @manual-spacing, @offset);
}

// fully responsive
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = true) {
		#generate-ctn(@cols, @spacing, @manual-spacing, @offset);
		#mq-min-width(@screen-ph, { #generate-resp-ctn(ph, @cols, @spacing, @manual-spacing, @offset); });		
		#mq-min-width(@screen-xs, { #generate-resp-ctn(xs, @cols, @spacing, @manual-spacing, @offset); });
		#mq-min-width(@screen-sm, { #generate-resp-ctn(sm, @cols, @spacing, @manual-spacing, @offset); });
		#mq-min-width(@screen-md, { #generate-resp-ctn(md, @cols, @spacing, @manual-spacing, @offset); });
		#mq-min-width(@screen-lg, { #generate-resp-ctn(lg, @cols, @spacing, @manual-spacing, @offset); });
		// #mq-min-width(@screen-xl, { #generate-resp-ctn(xl, @cols, @spacing, @manual-spacing, @offset); });
		#mq-desktop-design({ #generate-resp-ctn(desktop, @cols, @spacing, @manual-spacing, @offset); });		
}

#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = ph) {
		#mq-min-width(@screen-ph, { #generate-resp-ctn(ph, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = xs) {
		#mq-min-width(@screen-xs, { #generate-resp-ctn(xs, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = sm) {
		#mq-min-width(@screen-sm, { #generate-resp-ctn(sm, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = md) {
		#mq-min-width(@screen-md, { #generate-resp-ctn(md, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = lg) {
		#mq-min-width(@screen-lg, { #generate-resp-ctn(lg, @cols, @spacing, @manual-spacing); });
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = xl) {
		#mq-min-width(@screen-xl, { 
			#generate-resp-ctn(xl, @cols, @spacing, @manual-spacing); 
		});
}
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false) when (@responsive = desktop) {
		#mq-desktop-design({ #generate-resp-ctn(desktop, @cols, @spacing, @manual-spacing); });
}

/*
#generate-grid(
	@cols:1, 
	@responsive: false, 
	@spacing: false, 
	@offset: false,
	@manual-spacing: false);*/

//=========================
// = GRID FUNCTIONS
//=========================

@grid-nb-cols-max: 12;

// generator
#generate-grid (@cols) when (@cols > 0) {

	// recursive definitions
	#generate-ctn (@n) {
		.ctn-@{n} {
			// cols
			#generate-cols-in(@n);
			#generate-cols-ex(@grid-nb-cols-max, @n);
		}
		
		#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i < @n) {
			// col definition
			> .col-@{i} {
				width: percentage(@i / @n);
			}
			
			> .col-offset-@{i} {
				margin-left: percentage(@i / @n);
			}
			
			// recursion
			#generate-cols-in(@n, (@i + 1));
		}
		#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n) {
			// col definition
			> .col-@{i} {
				width: 100%;
			}
			// recursion
			#generate-cols-ex(@n, (@i + 1));
		}
	}


	// recursive definitions
	#generate-resp-ctn(@prefix, @n) {
		.ctn-@{prefix}-@{n} {
			// cols
			#generate-cols-in(@n);
			
			// cols, resp
			#generate-resp-cols-in(@prefix, @n);
			#generate-resp-cols-ex(@prefix, @grid-nb-cols-max, @n);
		}
		
		// standard
		#generate-cols-in(@n, @i: 1) when (@i > 0) and (@i < @n)  {
			// col definition
			> .col-@{i} {
				width: percentage(@i / @n);
			}
			> .col-offset-@{i} {
				margin-left: percentage(@i / @n);
			}
			// recursion
			#generate-cols-in(@n, (@i + 1));
		}
		#generate-cols-ex(@n, @i: 1) when (@i > 0) and (@i <= @n)  {
			// col definition
			> .col-@{i} {
				width: 100%;
			}
			// recursion
			#generate-cols-ex(@n, (@i + 1));
		}
		
		// included col
		#generate-resp-cols-in(@prefix, @n, @i: 0) when (@i >= 0) and (@i < @n) {
			// col definition
			> .col-@{prefix}-@{i} when (@i > 0) {
				width: percentage(@i / @n);
			}
			
			> .col-offset-@{prefix}-@{i} {
				margin-left: percentage(@i / @n);
			}
			
			// recursion
			#generate-resp-cols-in(@prefix, @n, (@i + 1));
		}
		// excluded cols
		#generate-resp-cols-ex(@prefix, @n, @i: 1) when (@i > 0) and (@i <= @n) {
			// col definition
			> .col-@{prefix}-@{i} {
				width: 100%;
			}
			
			// recursion
			#generate-resp-cols-ex(@prefix, @n, (@i + 1));
		}
	}

	// not responsive
	#generate-ctn(@cols);
	
	// fully responsive
	#mq-min-width(@screen-ph, { #generate-resp-ctn(ph, @cols); });
	#mq-min-width(@screen-xs, { #generate-resp-ctn(xs, @cols); });
	#mq-min-width(@screen-sm, { #generate-resp-ctn(sm, @cols); });
	#mq-min-width(@screen-md, { #generate-resp-ctn(md, @cols); });
	#mq-min-width(@screen-lg, { #generate-resp-ctn(lg, @cols); });
	#mq-min-width(@screen-xl, { #generate-resp-ctn(xl, @cols); });
	#mq-desktop-design({ #generate-resp-ctn(desktop, @cols); });
}

//=========================
// = HOVER FUNCTIONS
//=========================

#hover (@rules) {
	html:not(.mobile) &:hover, &:focus, &:active {
		@rules();
	}
}

#hover (@selected, @rules) {
	html:not(.mobile) &:hover, &:focus, &:active, &@{selected} {
		@rules();
	}
}

#hover-no-focus (@rules) {
	html:not(.mobile) &:hover, &:active {
		@rules();
	}
}

#hover-no-focus (@selected, @rules) {
	html:not(.mobile) &:hover, &:active, &@{selected} {
		@rules();
	}
}

#hover-only (@rules) {
	html:not(.mobile) &:hover {
		@rules();
	}
}

#hover-only (@selected, @rules) {
	html:not(.mobile) &:hover, &@{selected} {
		@rules();
	}
}


//=========================
// = HYPHENS FUNCTIONS
//=========================

#hyphens(@val: auto) {
  word-wrap: break-word;
  -webkit-hyphens: @val;
     -moz-hyphens: @val;
      -ms-hyphens: @val; 
       -o-hyphens: @val;
          hyphens: @val;
}

//=========================
// = MISC FUNCTIONS
//=========================

/*
#text-wrap (@val: break-word) {
	overflow-wrap: @val;
	word-wrap: @val;
}
*/

#ellipsis (@mw: 100%) {
	max-width: @mw;
	white-space: nowrap;
	overflow: hidden;
	text-overflow: ellipsis;
}


//=========================
// = MQ FUNCTIONS
//=========================

#mq-min-width (@width, @rules) {
	@media screen and (min-width: @width) {
		@rules();
	}
}

#mq-max-width (@width, @rules) {
	@media screen and (max-width: @width) {
		@rules();
	}
}

#mq-min-max-width (@min-width, @max-width, @rules) {
	@media screen and (min-width: @min-width) and (max-width: @max-width) {
		@rules();
	}
}

#mq-min-height (@height, @rules) {
	@media screen and (min-height: @height) {
		@rules();
	}
}

#mq-max-height (@height, @rules) {
	@media screen and (max-height: @height) {
		@rules();
	}
}

#mq-min-dpi (@dpi, @rules) {
	@media screen and (min-resolution: @dpi) {
		@rules();
	}
}

#mq-max-dpi (@dpi, @rules) {
	@media screen and (max-resolution: @dpi) {
		@rules();
	}
}

#mq-px-ratio (@px-ratio, @rules) {
	@media screen and (-webkit-device-pixel-ratio: @px-ratio) {
		@rules();
	}
	
	@media screen and (device-pixel-ratio: @px-ratio) {
		@rules();
	}
}

#mq-min-px-ratio (@px-ratio, @rules) {
	@media screen and (-webkit-min-device-pixel-ratio: @px-ratio) {
		@rules();
	}
	
	@media screen and (min-device-pixel-ratio: @px-ratio) {
		@rules();
	}
}

#mq-orientation (@orientation, @rules) {
	@media screen and (orientation: @orientation) {
		@rules();
	}
}

#mq-mobile-design(@rules) {
	#mq-max-width(@screen-xs - 1, @rules);
}

#mq-desktop-design(@rules) {
	#mq-min-width(@screen-xs, @rules);
}

#mq-semi-desktop-design(@rules) {
	#mq-min-max-width(@screen-xs, @screen-sm - 1, @rules);
};

#mq-semi-desktop-and-mobile-design(@rules) {
	#mq-max-width(@screen-sm - 1, @rules);
}

#mq-upper-desktop-design(@rules) {
	#mq-min-width(@screen-sm, @rules);
}


//=========================
// = OUTLINE FUNCTIONS
//=========================

#no-outline () {
	outline:none;
	-moz-outline:none;
	-webkit-outline:none;
}

//=========================
// = PERSPECTIVE FUNCTIONS
//=========================

/* PERSPECTIVE */
#perspective (@perspective) {
	-webkit-perspective: @perspective;
	   -moz-perspective: @perspective;
		-ms-perspective: @perspective;
		 -o-perspective: @perspective;
			perspective: @perspective;
}

#perspective-origin (@origin) {
	-webkit-perspective-origin: @origin;
	   -moz-perspective-origin: @origin;
		-ms-perspective-origin: @origin;
		 -o-perspective-origin: @origin;
			perspective-origin: @origin;
}

//=========================
// = PLACEHOLDER FUNCTIONS
//=========================

//Documentation http://blog.teamtreehouse.com/the-css3-placeholder-pseudo-element
#placeholder (@color) when (iscolor(@color)) {
	&:-moz-placeholder            { color: @color; } // Firefox 4-18
	&::-moz-placeholder           { color: @color; } // Firefox 19+
	&:-ms-input-placeholder       { color: @color; } // Internet Explorer 10+
	&::-webkit-input-placeholder  { color: @color; } // Safari and Chrome
}

#placeholder (@rules) when (false = iscolor(@rules)) {
	&:-moz-placeholder            { @rules(); } // Firefox 4-18
	&::-moz-placeholder           { @rules(); } // Firefox 19+
	&:-ms-input-placeholder       { @rules(); } // Internet Explorer 10+
	&::-webkit-input-placeholder  { @rules(); } // Safari and Chrome
}
//=========================
// = SELECTION FUNCTIONS
//=========================

#selection-color (@color) when (iscolor(@color)) {
	::selection {
		background-color: @color;
	}
	
	::-moz-selection {
		background-color: @color;
	}
}

#selection-color (@rules) when (false = iscolor(@rules)) {
	::selection {
		@rules();
	}
	
	::-moz-selection {
		@rules();
	}
}

//=========================
// = FILL FUNCTIONS
//=========================

#fill (@top: 0, @right: @top, @bottom: @top, @left: @top) {
	top: @top;
	left: @left;
	right: @right;
	bottom: @bottom;
}


//=========================
// = TRANSFORM FUNCTIONS
//=========================

/* TRANSFORM */
#transform (...) {
	-webkit-transform: @arguments;
	   -moz-transform: @arguments;
		-ms-transform: @arguments;
		 -o-transform: @arguments;
			transform: @arguments;
}

#transform-origin (@origin) {
	-webkit-transform-origin: @origin;
	   -moz-transform-origin: @origin;
		-ms-transform-origin: @origin;
		 -o-transform-origin: @origin;
			transform-origin: @origin;
}

/* TRANSLATE */
#translate2d (@x, @y) {
	-webkit-transform: translate(@x, @y);
	   -moz-transform: translate(@x, @y);
		-ms-transform: translate(@x, @y);
		 -o-transform: translate(@x, @y);
			transform: translate(@x, @y);
}

#translate (@x, @y, @z:0px) {
	#translate2d(@x, @y);

	-webkit-transform: translate3d(@x, @y, @z);
	   -moz-transform: translate3d(@x, @y, @z);
		-ms-transform: translate3d(@x, @y, @z);
		 -o-transform: translate3d(@x, @y, @z);
			transform: translate3d(@x, @y, @z);
}

/* SCALE */
#scale3d (@scaleX, @scaleY: @scaleX, @scaleZ: 1) {
	#scale2d(@scaleX, @scaleY);
	
	-webkit-transform: scale3d(@scaleX, @scaleY, @scaleZ);
	   -moz-transform: scale3d(@scaleX, @scaleY, @scaleZ);
		-ms-transform: scale3d(@scaleX, @scaleY, @scaleZ);
		 -o-transform: scale3d(@scaleX, @scaleY, @scaleZ);
			transform: scale3d(@scaleX, @scaleY, @scaleZ);
}

#scale2d (@scaleX, @scaleY: @scaleX) {
	-webkit-transform: scale(@scaleX,@scaleY);
	   -moz-transform: scale(@scaleX,@scaleY);
		-ms-transform: scale(@scaleX,@scaleY);
		 -o-transform: scale(@scaleX,@scaleY);
			transform: scale(@scaleX,@scaleY);
}

#scale (@scale) {
	#scale2d(@scale, @scale);
}

/* ROTATE */
#rotateZ (@a) {
	-webkit-transform: rotateZ(@a);
	   -moz-transform: rotateZ(@a);
		-ms-transform: rotateZ(@a);
		 -o-transform: rotateZ(@a);
			transform: rotateZ(@a);
}

/* SKEW */
#skew (@skew) {
	-webkit-transform: skew(@skew);
	   -moz-transform: skew(@skew);
		-ms-transform: scale(@skew); // ms does not support skew
		 -o-transform: skew(@skew);
			transform: skew(@skew);
}

/* FLIP */
#flipX () {
	-webkit-transform: scaleX(-1);
	   -moz-transform: scaleX(-1);
	     -o-transform: scaleX(-1);
			transform: scaleX(-1);
	filter: FlipH;
	-ms-filter: "FlipH";
}

#flipY () {
	-webkit-transform: scaleY(-1);
	   -moz-transform: scaleY(-1);
	     -o-transform: scaleY(-1);
			transform: scaleY(-1);
	filter: FlipV;
	-ms-filter: "FlipV";
}


/* PRESERVE 3D */
#preserve-3d () {
	-webkit-transform-style: preserve-3d;
	   -moz-transform-style: preserve-3d;
		-ms-transform-style: preserve-3d;
		 -o-transform-style: preserve-3d;
			transform-style: preserve-3d;
}

//=========================
// = TRANSITION FUNCTIONS
//=========================

/* TRANSITION */
#transition (...) {
	-webkit-transition: @arguments;
	   -moz-transition: @arguments;
		-ms-transition: @arguments;
		 -o-transition: @arguments;
			transition: @arguments;
}

#cb-transition (...) {
	-webkit-transition: ~"-webkit-@{arguments}";
	   -moz-transition: ~"-moz-@{arguments}";
		-ms-transition: ~"-ms-@{arguments}";
		 -o-transition: ~"-o-@{arguments}";
			transition: @arguments;
}

#transition-property (...) {
	-webkit-transition-property: @arguments;
	   -moz-transition-property: @arguments;
		-ms-transition-property: @arguments;
		 -o-transition-property: @arguments;
			transition-property: @arguments;
}

#transition-duration (@duration) {
	-webkit-transition-duration: @duration;
	   -moz-transition-duration: @duration;
		-ms-transition-duration: @duration;
		 -o-transition-duration: @duration;
			transition-duration: @duration;
}

#transition-delay (@delay) {
	-webkit-transition-delay: @delay;
	   -moz-transition-delay: @delay;
		-ms-transition-delay: @delay;
		 -o-transition-delay: @delay;
			transition-delay: @delay;
}

//=========================
// = USER-SELECT FUNCTIONS
//=========================

/* USER-SELECT */
#user-select (@select: none) {
	-webkit-touch-callout: @select;
	-webkit-user-select: @select;
	 -khtml-user-select: @select;
	   -moz-user-select: @select;
		-ms-user-select: @select;
			user-select: @select;
}
//====== Animation ============
@duration-shortest: 150ms;
@duration-shorter: 200ms;
@duration-short: 300ms;
@duration: 500ms;
@duration-long: 750ms;
@duration-longer: 1000ms;
@duration-longest: 1500ms;

@visanim: visibility 0ms linear;

/*
@ease: ease-in-out;
@ease-in: ease-in;
@ease-out: ease-out;
@ease-in-out: ease-in-out;
*/
//=========================
// = VARIABLES FOR GRAPHICS
//=========================


@border-radius-smallest: 2px;
@border-radius-smaller: 3px;
@border-radius-small: 4px;
@border-radius-mid: 10px;
@border-radius-large: 4rem;
@border-radius-larger: 5rem;
@border-radius-largest: 10rem;

@border-radius-half: 50%;
@border-radius-full: 100%;
//=========================
// = VARIABLES FOR GRAPHICS
//=========================

/*
@border-width-smallest: 1px;
@border-width-smaller: 2px;
@border-width-small: 3px;
@border-width-mid: 4px;
@border-width-large: .6rem;
@border-width-larger: 0.8rem;
@border-width-largest: 1rem;
*/
//=========================
// = VARIABLES FOR GRAPHICS
//=========================

/*
@border-base: @border-width-mid solid;
@border-alt: @border-width-large solid;
@border-accent: @border-width-large dashed;
*/

//====== COLORS ================
@true-white: #ffffff;
@true-black: #000000;

//====== SYMBOLIC ================
@white: @true-white;
@black: @true-black;

@light: @true-white;
@dark: @true-black;

//====== DURATION ============

@duration-shortest: 150ms;
@duration-shorter: 200ms;
@duration-short: 300ms;
@duration: 500ms;
@duration-long: 750ms;
@duration-longer: 1000ms;
@duration-longest: 1500ms;
@duration-mega: 2500ms;
@duration-huge: 5000ms;

// ====== ease ============

@ease: @ease-in-out;

@ease-in: ease-in;
@ease-out: ease-out;
@ease-in-out: ease-in-out;

@ease-quart-in-out: cubic-bezier(0.77, 0, 0.175, 1);

@ease-quad-in-out: cubic-bezier(0.455, 0.03, 0.515, 0.955);
@ease-quad-out: cubic-bezier(0.25, 0.46, 0.45, 0.94);

@ease-quint-out: cubic-bezier(0.23, 1, 0.32, 1);

@ease-circ-in-out: cubic-bezier(0.785, 0.135, 0.15, 0.86);
@ease-circ-out: cubic-bezier(0.075, 0.82, 0.165, 1);
@ease-circ-in: cubic-bezier(0.6, 0.04, 0.98, 0.335);

@ease-expo-in: cubic-bezier(0.95, 0.05, 0.795, 0.035);

@ease-back-in: cubic-bezier(0.6, -0.28, 0.735, 0.045);

//====== FONTS ==== 

@font-base: 'sans-serif';
@font-alt: 'serif';
@font-accent: 'serif';

@grid-visualizer-gutter-color: rgba(255,0,0,.1);
@grid-visualizer-baseline-color: rgba(0,0,0,.2);
@grid-visualizer-column-color: transparent;
//====== SCREEN WIDTHS ============

@screen-ip: 320px;
@screen-ph: 600px;
@screen-xs: 768px;
@screen-sm: 1024px;
@screen-md: 1280px;
@screen-lg: 1440px;
@screen-xl: 1600px;
@screen-max: 1920px;



//=========================
// = VARIABLES PATH
//=========================

@css-path: '/workspace/assets/css/';
@font-path: '/workspace/assets/fonts/';
@img-path: '/workspace/assets/img/';
@cur-path: '/workspace/assets/cur/';
@svg-path: '@{css-path}svg/';

//====== SCREEN WIDTHS ============

@screen-ip: 320px;
@screen-ph: 600px;
@screen-xs: 768px;
@screen-sm: 1024px;
@screen-md: 1280px;
@screen-lg: 1440px;
@screen-xl: 1600px;
@screen-hd: 1920px;
@screen-2k: 2048px;
@screen-4k: 3840px;


@screen-min: 200px;
@screen-max: 1920px;

//=========================
// = VARIABLES SPACING
//=========================

@spacing-atto: 0.1px;
@spacing-femto: 0.2rem;
@spacing-pico: 0.4rem;
@spacing-nano: 0.5rem;
@spacing-micro: 0.7rem;

@spacing-xsmall: 1rem;

@spacing-smallest: 1.5rem;
@spacing-smaller: 2rem;
@spacing-small: 2.5rem;

@spacing-mid: 3rem;

@spacing-large: 4rem;
@spacing-larger: 5rem;
@spacing-largest: 6rem;

@spacing-xlarge: 10rem;

@spacing-huge: 20rem;
@spacing-mega: 30rem;
@spacing-giga: 40rem;

@spacing-tera: 60rem;
@spacing-peta: 80rem;
@spacing-zetta: 100rem;
@spacing-yotta: 120rem;
//====== FONTS ==== 

/* Text */
@text-font: 'sans-serif';

/* Heading */
@heading-font: 'serif';

//=========================
// = VARIABLES GLOBALES
//=========================

@golden-ratio: 1.61803398875;
